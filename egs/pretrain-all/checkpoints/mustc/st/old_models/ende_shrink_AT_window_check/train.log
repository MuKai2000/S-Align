2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 0): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 4): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 1): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 2): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 3): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 7): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 6): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | distributed init (rank 5): tcp://localhost:19145
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 7
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 0
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 4
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 1
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 5
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 3
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 2
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 6
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 6: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 6
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 0
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 7: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 7
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 4: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 4
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 5: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 5
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 3
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 2
2023-07-11 11:50:10 | INFO | torch.distributed.distributed_c10d | Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:50:10 | INFO | fairseq.distributed.utils | initialized host capios as rank 1
2023-07-11 11:50:12 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': True, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': True, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 8, 'distributed_num_procs': 8, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': 'tcp://localhost:19145', 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'no_c10d', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 8, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': True, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 2, 'skip_invalid_size_inputs_valid_test': True, 'max_tokens': 15000, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train_st,train_asr,train_mt', 'valid_subset': 'dev_st', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 15000, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 100, 'max_update': 60000, 'stop_time_hours': 0.0, 'clip_norm': 10.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.0002], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 2000, 'keep_interval_updates': 5, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': 2, 'keep_best_checkpoints': 10, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'bleu', 'maximize_best_checkpoint_metric': True, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 8}, 'generation': {'_name': None, 'beam': 5, 'beam_mt': 0, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'max_len_a_mt': 0.0, 'max_len_b_mt': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'lenpen_mt': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='s2t_joint', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'task': Namespace(_name='joint_triple_pretraining', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'criterion': Namespace(_name='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9,0.98)', 'adam_eps': 1e-08, 'weight_decay': 0.0, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [0.0002]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 5000, 'warmup_init_lr': 1e-07, 'lr': [0.0002]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'simul_type': None}
2023-07-11 11:50:12 | INFO | fairseq.tasks.joint_triple_pretraining | dictionary size (dict.wrd.txt): 10,000
2023-07-11 11:50:12 | INFO | fairseq.tasks.joint_triple_pretraining | asr dictionary size (dict.wrd.txt): 10,000
2023-07-11 11:50:12 | INFO | fairseq.tasks.joint_triple_pretraining | cluster dictionary size (kmeans100.convert.txt): 5,224
2023-07-11 11:50:12 | INFO | fairseq.tasks.joint_triple_pretraining | Initial task weight: asr 1.0: mt 1.0
2023-07-11 11:50:12 | INFO | root | load pretrained embeddings: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 11:50:17 | INFO | fairseq.tasks.hubert_pretraining | current directory is /workspace/fairseq-AT/egs/pretrain-all
2023-07-11 11:50:17 | INFO | fairseq.tasks.hubert_pretraining | HubertPretrainingTask Config {'_name': 'hubert_pretraining', 'data': 'data_all_ende_lcrm', 'fine_tuning': False, 'labels': ['layer6.km500'], 'label_dir': None, 'label_rate': 50.0, 'sample_rate': 16000, 'normalize': False, 'enable_padding': False, 'max_keep_size': None, 'max_sample_size': 250000, 'min_sample_size': 32000, 'single_target': False, 'random_crop': True, 'pad_audio': False}
2023-07-11 11:50:17 | INFO | fairseq.models.hubert.hubert | HubertModel Config: {'_name': 'hubert', 'label_rate': 50.0, 'extractor_mode': default, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': gelu, 'layer_type': transformer, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.1, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.1, 'final_dim': 256, 'untie_final_proj': False, 'layer_norm_first': False, 'conv_feature_layers': '[(512,10,5)] + [(512,3,2)] * 4 + [(512,2,2)] * 2', 'conv_bias': False, 'logit_temp': 0.1, 'target_glu': False, 'feature_grad_mult': 0.0, 'mask_length': 10, 'mask_prob': 0.5, 'mask_selection': static, 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'mask_channel_length': 6, 'mask_channel_prob': 0.25, 'mask_channel_selection': static, 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'conv_pos': 128, 'conv_pos_groups': 16, 'latent_temp': [2.0, 0.5, 0.999995], 'skip_masked': False, 'skip_nomask': False, 'checkpoint_activations': False, 'required_seq_len_multiple': 2, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': True}
2023-07-11 11:50:19 | INFO | root | load pretrained hubert
2023-07-11 11:50:19 | INFO | root | load pretrained embedding as ctc proj: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 11:50:21 | INFO | root | load pretrained encoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 11:50:23 | INFO | root | load pretrained decoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 11:50:23 | INFO | root | share the sematic adapter and textual encoder
2023-07-11 11:50:23 | INFO | fairseq_cli.train | S2TJoint(
  (acoustic_encoder): AcousticEncoder(
    (compress_ffn): Linear(in_features=768, out_features=512, bias=True)
    (proj): Linear(in_features=512, out_features=10000, bias=False)
    (w2v_model): HubertModel(
      (feature_extractor): ConvFeatureExtractionModel(
        (conv_layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(1, 512, kernel_size=(10,), stride=(5,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): Fp32GroupNorm(512, 512, eps=1e-05, affine=True)
            (3): GELU(approximate='none')
          )
          (1-4): 4 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(3,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
          (5-6): 2 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(2,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
        )
      )
      (post_extract_proj): Linear(in_features=512, out_features=768, bias=True)
      (dropout_input): Dropout(p=0.0, inplace=False)
      (dropout_features): Dropout(p=0.1, inplace=False)
      (encoder): TransformerEncoder(
        (pos_conv): Sequential(
          (0): Conv1d(768, 768, kernel_size=(128,), stride=(1,), padding=(64,), groups=16)
          (1): SamePad()
          (2): GELU(approximate='none')
        )
        (layers): ModuleList(
          (0-11): 12 x TransformerSentenceEncoderLayer(
            (self_attn): MultiheadAttention(
              (dropout_module): FairseqDropout()
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
        (layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      (final_proj): None
    )
    (noad): NormalAdapter(
      (subsample): Conv1dSubsampler(
        (conv_layers): ModuleList(
          (0): Conv1d(512, 512, kernel_size=(5,), stride=(2,), padding=(2,))
          (1): Conv1d(256, 1024, kernel_size=(5,), stride=(2,), padding=(2,))
        )
      )
      (layers): ModuleList()
    )
    (sead): SemanticAdapter(
      (embed_positions): SinusoidalPositionalEmbedding()
      (layers): ModuleList(
        (0-5): 6 x TransformerEncoderLayerBase(
          (self_attn): MultiheadAttention(
            (dropout_module): FairseqDropout()
            (k_proj): Linear(in_features=512, out_features=512, bias=True)
            (v_proj): Linear(in_features=512, out_features=512, bias=True)
            (q_proj): Linear(in_features=512, out_features=512, bias=True)
            (out_proj): Linear(in_features=512, out_features=512, bias=True)
          )
          (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (dropout_module): FairseqDropout()
          (activation_dropout_module): FairseqDropout()
          (fc1): Linear(in_features=512, out_features=1024, bias=True)
          (fc2): Linear(in_features=1024, out_features=512, bias=True)
          (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
    (final_dropout): Dropout(p=0.1, inplace=False)
    (shrink_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (textual_encoder): MTModelEncoder(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (decoder): TransformerDecoderScriptable(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (output_projection): Linear(in_features=512, out_features=10000, bias=False)
  )
  (task_net): TaskNetwork(
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (down_proj): Linear(in_features=512, out_features=256, bias=True)
    (up_proj): Linear(in_features=256, out_features=512, bias=True)
    (dropout_module): FairseqDropout()
    (task_proj): Linear(in_features=512, out_features=1, bias=False)
  )
)
2023-07-11 11:50:23 | INFO | fairseq_cli.train | task: JointTriplePretrainingTask
2023-07-11 11:50:23 | INFO | fairseq_cli.train | model: S2TJoint
2023-07-11 11:50:23 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropywithW2vCtcShrinkJointAT
2023-07-11 11:50:23 | INFO | fairseq_cli.train | num. shared model params: 134,449,280 (num. trained: 134,449,280)
2023-07-11 11:50:23 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
2023-07-11 11:50:23 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 11:50:23 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:50:23 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:50:23 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="dev_st", n_samples=1418, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:50:23 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:2 to store for rank: 0
2023-07-11 11:50:33 | INFO | torch.distributed.distributed_c10d | Waiting in store based barrier to initialize process group for rank: 0, key: store_based_barrier_key:2 (world_size=8, worker_count=5, timeout=0:30:00)
2023-07-11 11:50:33 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:2 with 8 nodes.
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- textual_encoder.embed_tokens.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.embed_tokens.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.output_projection.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.0.0.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.1.0.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.2.0.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.3.0.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.4.0.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.5.0.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.6.0.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- decoder.output_projection.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- task_net.task_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.weight <- textual_encoder.layers.0.self_attn.k_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.bias <- textual_encoder.layers.0.self_attn.k_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.weight <- textual_encoder.layers.0.self_attn.v_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.bias <- textual_encoder.layers.0.self_attn.v_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.weight <- textual_encoder.layers.0.self_attn.q_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.bias <- textual_encoder.layers.0.self_attn.q_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.weight <- textual_encoder.layers.0.self_attn.out_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.bias <- textual_encoder.layers.0.self_attn.out_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.weight <- textual_encoder.layers.0.self_attn_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.bias <- textual_encoder.layers.0.self_attn_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.weight <- textual_encoder.layers.0.fc1.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.bias <- textual_encoder.layers.0.fc1.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.weight <- textual_encoder.layers.0.fc2.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.bias <- textual_encoder.layers.0.fc2.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.weight <- textual_encoder.layers.0.final_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.bias <- textual_encoder.layers.0.final_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.weight <- textual_encoder.layers.1.self_attn.k_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.bias <- textual_encoder.layers.1.self_attn.k_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.weight <- textual_encoder.layers.1.self_attn.v_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.bias <- textual_encoder.layers.1.self_attn.v_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.weight <- textual_encoder.layers.1.self_attn.q_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.bias <- textual_encoder.layers.1.self_attn.q_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.weight <- textual_encoder.layers.1.self_attn.out_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.bias <- textual_encoder.layers.1.self_attn.out_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.weight <- textual_encoder.layers.1.self_attn_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.bias <- textual_encoder.layers.1.self_attn_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.weight <- textual_encoder.layers.1.fc1.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.bias <- textual_encoder.layers.1.fc1.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.weight <- textual_encoder.layers.1.fc2.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.bias <- textual_encoder.layers.1.fc2.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.weight <- textual_encoder.layers.1.final_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.bias <- textual_encoder.layers.1.final_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.weight <- textual_encoder.layers.2.self_attn.k_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.bias <- textual_encoder.layers.2.self_attn.k_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.weight <- textual_encoder.layers.2.self_attn.v_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.bias <- textual_encoder.layers.2.self_attn.v_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.weight <- textual_encoder.layers.2.self_attn.q_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.bias <- textual_encoder.layers.2.self_attn.q_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.weight <- textual_encoder.layers.2.self_attn.out_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.bias <- textual_encoder.layers.2.self_attn.out_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.weight <- textual_encoder.layers.2.self_attn_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.bias <- textual_encoder.layers.2.self_attn_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.weight <- textual_encoder.layers.2.fc1.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.bias <- textual_encoder.layers.2.fc1.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.weight <- textual_encoder.layers.2.fc2.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.bias <- textual_encoder.layers.2.fc2.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.weight <- textual_encoder.layers.2.final_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.bias <- textual_encoder.layers.2.final_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.weight <- textual_encoder.layers.3.self_attn.k_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.bias <- textual_encoder.layers.3.self_attn.k_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.weight <- textual_encoder.layers.3.self_attn.v_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.bias <- textual_encoder.layers.3.self_attn.v_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.weight <- textual_encoder.layers.3.self_attn.q_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.bias <- textual_encoder.layers.3.self_attn.q_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.weight <- textual_encoder.layers.3.self_attn.out_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.bias <- textual_encoder.layers.3.self_attn.out_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.weight <- textual_encoder.layers.3.self_attn_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.bias <- textual_encoder.layers.3.self_attn_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.weight <- textual_encoder.layers.3.fc1.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.bias <- textual_encoder.layers.3.fc1.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.weight <- textual_encoder.layers.3.fc2.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.bias <- textual_encoder.layers.3.fc2.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.weight <- textual_encoder.layers.3.final_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.bias <- textual_encoder.layers.3.final_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.weight <- textual_encoder.layers.4.self_attn.k_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.bias <- textual_encoder.layers.4.self_attn.k_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.weight <- textual_encoder.layers.4.self_attn.v_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.bias <- textual_encoder.layers.4.self_attn.v_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.weight <- textual_encoder.layers.4.self_attn.q_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.bias <- textual_encoder.layers.4.self_attn.q_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.weight <- textual_encoder.layers.4.self_attn.out_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.bias <- textual_encoder.layers.4.self_attn.out_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.weight <- textual_encoder.layers.4.self_attn_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.bias <- textual_encoder.layers.4.self_attn_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.weight <- textual_encoder.layers.4.fc1.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.bias <- textual_encoder.layers.4.fc1.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.weight <- textual_encoder.layers.4.fc2.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.bias <- textual_encoder.layers.4.fc2.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.weight <- textual_encoder.layers.4.final_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.bias <- textual_encoder.layers.4.final_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.weight <- textual_encoder.layers.5.self_attn.k_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.bias <- textual_encoder.layers.5.self_attn.k_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.weight <- textual_encoder.layers.5.self_attn.v_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.bias <- textual_encoder.layers.5.self_attn.v_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.weight <- textual_encoder.layers.5.self_attn.q_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.bias <- textual_encoder.layers.5.self_attn.q_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.weight <- textual_encoder.layers.5.self_attn.out_proj.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.bias <- textual_encoder.layers.5.self_attn.out_proj.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.weight <- textual_encoder.layers.5.self_attn_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.bias <- textual_encoder.layers.5.self_attn_layer_norm.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.weight <- textual_encoder.layers.5.fc1.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.bias <- textual_encoder.layers.5.fc1.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.weight <- textual_encoder.layers.5.fc2.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.bias <- textual_encoder.layers.5.fc2.bias
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.weight <- textual_encoder.layers.5.final_layer_norm.weight
2023-07-11 11:50:33 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.bias <- textual_encoder.layers.5.final_layer_norm.bias
2023-07-11 11:50:34 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   0: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   1: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   2: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   3: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   4: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   5: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   6: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | rank   7: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:50:34 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 11:50:34 | INFO | fairseq_cli.train | training on 8 devices (GPUs/TPUs)
2023-07-11 11:50:34 | INFO | fairseq_cli.train | max tokens per device = 15000 and max sentences per device = None
2023-07-11 11:50:34 | INFO | fairseq.trainer | Preparing to load checkpoint ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 11:50:34 | INFO | fairseq.trainer | No existing checkpoint found ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 11:50:34 | INFO | fairseq.trainer | loading train data for epoch 1
2023-07-11 11:50:34 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 11:50:34 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:50:34 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:50:35 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_mt", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:50:37 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_asr", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:50:39 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_st", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:51:43 | INFO | fairseq.data.iterators | grouped total_num_itrs = 1474
2023-07-11 11:51:43 | INFO | fairseq.trainer | begin training epoch 1
2023-07-11 11:51:43 | INFO | fairseq_cli.train | Start iterating over samples
 > 1.  torch.Size([8, 158, 512]) torch.float16
 > 2.  158 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
2023-07-11 11:51:54 | INFO | fairseq.trainer | NOTE: gradient overflow detected, ignoring gradient, setting loss scale to: 64.0
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 217, 512]) torch.float16
 > 2.  217 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([5, 353, 512]) torch.float16
 > 2.  353 20 10 35
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([845, 1]) torch.Size([845, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 222, 512]) torch.float16
 > 2.  222 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 198, 512]) torch.float16
 > 2.  198 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([152, 13, 512]) torch.float16
 > 2.  13 20 10 1
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([2432, 1]) torch.Size([2432, 1])
2023-07-11 11:52:11 | INFO | fairseq.trainer | NOTE: gradient overflow detected, ignoring gradient, setting loss scale to: 32.0
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([7, 236, 512]) torch.float16
 > 2.  236 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([7, 257, 512]) torch.float16
 > 2.  257 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([5, 315, 512]) torch.float16
 > 2.  315 20 10 31
 > 6.  torch.Size([155, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([8, 153, 512]) torch.float16
 > 2.  153 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([32, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([8, 202, 512]) torch.float16
 > 2.  202 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([8, 202, 512]) torch.float16
 > 2.  202 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([16, 105, 512]) torch.float16
 > 2.  105 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 155, 512]) torch.float16
 > 2.  155 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([6, 277, 512]) torch.float16
 > 2.  277 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([750, 1]) torch.Size([750, 1])
 > 1.  torch.Size([8, 176, 512]) torch.float16
 > 2.  176 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([16, 97, 512]) torch.float16
 > 2.  97 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 114, 512]) torch.float16
 > 2.  114 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([16, 88, 512]) torch.float16
 > 2.  88 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([56, 32, 512]) torch.float16
 > 2.  32 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1512, 1]) torch.Size([1512, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1232, 1]) torch.Size([1232, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([88, 21, 512]) torch.float16
 > 2.  21 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1496, 1]) torch.Size([1496, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([8, 156, 512]) torch.float16
 > 2.  156 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([80, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 84, 512]) torch.float16
 > 2.  84 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 145, 512]) torch.float16
 > 2.  145 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([6, 285, 512]) torch.float16
 > 2.  285 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([702, 1]) torch.Size([702, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([5, 349, 512]) torch.float16
 > 2.  349 20 10 34
 > 6.  torch.Size([170, 512]) torch.float16
 > 7.  torch.Size([730, 1]) torch.Size([730, 1])
 > 1.  torch.Size([8, 153, 512]) torch.float16
 > 2.   > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([80, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1520, 1]) torch.Size([1520, 1])
 > 1.  torch.Size([8, 183, 512]) torch.float16
 > 2.  183 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([5, 358, 512]) torch.float16
 > 2.  358 20 10 35
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([750, 1]) torch.Size([750, 1])
 > 1.  torch.Size([8, 179, 512]) torch.float16
 > 2.  179 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([8, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([696, 1]) torch.Size([696, 1])
 > 1.  torch.Size([56, 31, 512]) torch.float16
 > 2.  31 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1232, 1]) torch.Size([1232, 1])
 > 1.  torch.Size([8, 161, 512]) torch.float16
 > 2.  161 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 196, 512]) torch.float16
 > 2.  196 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([7, 261, 512]) torch.float16
 > 2.  261 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16
 > 7.  torch.Size([791, 1]) torch.Size([791, 1])
 > 1.  torch.Size([16, 97, 512]) torch.float16
 > 2.  97 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([16, 84, 512]) torch.float16
 > 2.  84 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 231, 512]) torch.float16
 > 2.  231 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([136, 14, 512]) torch.float16
 > 2.  14 20 10 1
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([2176, 1]) torch.Size([2176, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 162, 512]) torch.float16
 > 2.  162 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 211, 512]) torch.float16
 > 2.  211 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 180, 512]) torch.float16
 > 2.  180 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([5, 372, 512]) torch.float16
 > 2.  372 20 10 37
 > 6.  torch.Size([185, 512]) torch.float16
 > 7.  torch.Size([875, 1]) torch.Size([875, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([693, 1]) torch.Size([693, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([8, 179, 512]) torch.float16
 > 2.  179 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([6, 271, 512]) torch.float16
 > 2.  271 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([678, 1]) torch.Size([678, 1])
 > 1.  torch.Size([56, 34, 512]) torch.float16
 > 2.  34 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.   > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 130, 512]) torch.float16
 > 2.  130 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1416, 1]) torch.Size([1416, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 186, 512]) torch.float16
 > 2.  186 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([7, 262, 512]) torch.float16
 > 2.  262 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16
 > 7.  torch.Size([805, 1]) torch.Size([805, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 221, 512]) torch.float16
 > 2.  221 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([5, 355, 512]) torch.float16
 > 2.  355 20 10 35
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([835, 1]) torch.Size([835, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([8, 172, 512]) torch.float16
 > 2.  172 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 110, 512]) torch.float16
 > 2.  110 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 114, 512]) torch.float16
 > 2.  114 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([416, 1]) torch.Size([416, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1176, 1]) torch.Size([1176, 1])
 > 1.  torch.Size([8, 169, 512]) torch.float16
 > 2.  169 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([8, 211, 512]) torch.float16
 > 2.  211 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 214, 512]) torch.float16
 > 2.  214 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 203, 512])  > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([48, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([16, 107, 512]) torch.float16
 > 2.  107 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([6, 294, 512]) torch.float16
 > 2.  294 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([732, 1]) torch.Size([732, 1])
 > 1.  torch.Size([8, 146, 512]) torch.float16
 > 2.  146 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([88, 20, 512]) torch.float16
 > 2.  20 20 10 1
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1200, 1]) torch.Size([1200, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([5, 350, 512]) torch.float16
 > 2.  350 20 10 34
 > 6.  torch.Size([170, 512]) torch.float16
 > 7.  torch.Size([770, 1]) torch.Size([770, 1])
 > 1.  torch.Size([32, 55, 512]) torch.float16
 > 2.  55 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([6, 295, 512]) torch.float16
 > 2.  295 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([822, 1]) torch.Size([822, 1])
 > 1.  torch.Size([8, 180, 512]) torch.float16
 > 2.  180 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([6, 272, 512]) torch.float16
 > 2.  272 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([708, 1]) torch.Size([708, 1])
 > 1.  torch.Size([8, 198, 512]) torch.float16
 > 2.  198 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([96, 20, 512]) torch.float16
 > 2.  20 20 10 1
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([1632, 1]) torch.Size([1632, 1])
 > 1.  torch.Size([8, 161, 512]) torch.float16
 > 2.  161 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([72, 24, 512]) torch.float16
 > 2.  24 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([5, 362, 512]) torch.float16
 > 2.  362 20 10 36
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([785, 1]) torch.Size([785, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([6, 289, 512]) torch.float16
 > 2.  289 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([828, 1]) torch.Size([828, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([32, 52, 512]) torch.float16
 > 2.  52 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 190, 512]) torch.float16
 > 2.  190 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([696, 1]) torch.Size([696, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 186, 512]) torch.float16
 > 2.  186 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([5, 339, 512]) torch.float16
 > 2.  339 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([695, 1]) torch.Size([695, 1])
 > 1.  torch.Size([120, 16, 512]) torch.float16
 > 2.  16 20 10 1
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1920, 1]) torch.Size([1920, 1])
 > 1.  torch.Size([104, 18, 512]) torch.float16
 > 2.  18 20 10 1
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([3640, 1]) torch.Size([3640, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([40, 41, 512]) torch.float16
 > 2.  41 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1280, 1]) torch.Size([1280, 1])
 > 1.  torch.Size([8, 174, 512]) torch.float16
 > 2.  174 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 203, 512]) torch.float16
 > 1.  torch.Size([8, 200, 512]) torch.float16
 > 2.  200 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([8, 175, 512]) torch.float16
 > 2.  175 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([7, 267, 512]) torch.float16
 > 2.  267 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16
 > 7.  torch.Size([903, 1]) torch.Size([903, 1])
 > 1.  torch.Size([56, 33, 512]) torch.float16
 > 2.  33 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1456, 1]) torch.Size([1456, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([7, 251, 512]) torch.float16
 > 2.  251 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([735, 1]) torch.Size([735, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 180, 512]) torch.float16
 > 2.  180 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([64, 29, 512]) torch.float16
 > 2.  29 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1408, 1]) torch.Size([1408, 1])
 > 1.  torch.Size([16, 107, 512]) torch.float16
 > 2.  107 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([6, 289, 512]) torch.float16
 > 2.  289 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([48, 39, 512]) torch.float16
 > 2.  39 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1392, 1]) torch.Size([1392, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([742, 1]) torch.Size([742, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([8, 184, 512]) torch.float16
 > 2.  184 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([7, 244, 512]) torch.float16
 > 2.  244 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([8, 178, 512]) torch.float16
 > 2.  178 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([5, 330, 512]) torch.float16
 > 2.  330 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([740, 1]) torch.Size([740, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([5, 316, 512]) torch.float16
 > 2.  316 20 10 31
 > 6.  torch.Size([155, 512]) torch.float16
 > 7.  torch.Size([670, 1]) torch.Size([670, 1])
 > 1.  torch.Size([7, 260, 512]) torch.float16
 > 2.  260 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 184, 512]) torch.float16
 > 2.  184 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 105, 512]) torch.float16
 > 2.  105 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 226, 512]) torch.float16
 > 2.  226 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 1.  torch.Size([6, 280, 512]) torch.float16
 > 2.  280 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([708, 1]) torch.Size([708, 1])
 > 1.  torch.Size([64, 28, 512]) torch.float16
 > 2.  28 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1536, 1]) torch.Size([1536, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([48, 35, 512]) torch.float16
 > 2.  35 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([8, 156, 512]) torch.float16
 > 2.  156 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([8, 163, 512]) torch.float16
 > 2.  163 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 150, 512]) torch.float16
 > 2.  150 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([8, 160, 512]) torch.float16
 > 2.  160 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([6, 276, 512]) torch.float16
 > 2.  276 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([678, 1]) torch.Size([678, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([8, 166, 512]) torch.float16
 > 2.  166 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1016, 1]) torch.Size([1016, 1])
 > 1.  torch.Size([72, 26, 512]) torch.float16
 > 2.  26 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 230, 512]) torch.float16
 > 2.  230 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([808, 1]) torch.Size([808, 1])
 > 1.  torch.Size([16, 107, 512]) torch.float16
 > 2.  107 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([80, 23, 512]) torch.float16
 > 2.  23 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([24, 66, 512]) torch.float16
 > 2.  66 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([7, 241, 512]) torch.float16
 > 2.  241 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([805, 1]) torch.Size([805, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([6, 303, 512]) torch.float16
 > 2.  303 20 10 30
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([852, 1]) torch.Size([852, 1])
 > 1.  torch.Size([8, 212, 512]) torch.float16
 > 2.  212 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([32, 49, 512]) torch.float16
 > 2.  49 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([16, 86, 512]) torch.float16
 > 2.  86 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([96, 20, 512]) torch.float16
 > 2.  20 20 10 1
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([1824, 1]) torch.Size([1824, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([5, 322, 512]) torch.float16
 > 2.  322 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([690, 1]) torch.Size([690, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 123, 512]) torch.float16
 > 2.  123 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 165, 512]) torch.float16
 > 2.  165 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([6, 277, 512]) torch.float16
 > 2.  277 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 144, 512]) torch.float16
 > 2.  144 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([88, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1496, 1]) torch.Size([1496, 1])
 > 1.  torch.Size([7, 236, 512]) torch.float16
 > 2.  236 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([658, 1]) torch.Size([658, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 164, 512]) torch.float16
 > 2.  164 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([8, 200, 512]) torch.float16
 > 2.  200 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([8, 179, 512]) torch.float16
 > 2.  179 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 129, 512]) torch.float16
 > 2.  129 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([88, 21, 512]) torch.float16
 > 2.  21 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1672, 1]) torch.Size([1672, 1])
 > 1.  torch.Size([8, 130, 512]) torch.float16
 > 2.  130 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 129, 512]) torch.float16
 > 2.  129 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 199, 512]) torch.float16
 > 2.  199 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([808, 1]) torch.Size([808, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([424, 1]) torch.Size([424, 1])
 > 1.  torch.Size([8, 182, 512]) torch.float16
 > 2.  182 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1512, 1]) torch.Size([1512, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([8, 158, 512]) torch.float16
 > 2.  158 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([6, 297, 512]) torch.float16
 > 2.  297 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([774, 1]) torch.Size([774, 1])
 > 1.  torch.Size([56, 32, 512]) torch.float16
 > 2.  32 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([5, 332, 512]) torch.float16
 > 2.  332 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([690, 1]) torch.Size([690, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([8, 151, 512]) torch.float16
 > 2.  151 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([6, 280, 512]) torch.float16
 > 2.  280 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([714, 1]) torch.Size([714, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([24, 60, 512]) torch.float16
 > 2.  60 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 74, 512]) torch.float16
 > 2.  74 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10  > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([8, 232, 512]) torch.float16
 > 2.  232 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([16, 114, 512]) torch.float16
 > 2.  114 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([24, 78, 512]) torch.float16
 > 2.  78 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 146, 512]) torch.float16
 > 2.  146 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([640, 1]) torch.Size([640, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 147, 512]) torch.float16
 > 2.  147 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([48, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([56, 34, 512]) torch.float16
 > 2.  34 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1456, 1]) torch.Size([1456, 1])
 > 1.  torch.Size([48, 39, 512]) torch.float16
 > 2.  39 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([7, 241, 512]) torch.float16
 > 2.  241 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([8, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([826, 1]) torch.Size([826, 1])
 > 1.  torch.Size([88, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1760, 1]) torch.Size([1760, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([8, 187, 512]) torch.float16
 > 2.  187 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([8, 167, 512]) torch.float16
 > 2.  167 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1200, 1]) torch.Size([1200, 1])
 > 1.  torch.Size([8, 151, 512]) torch.float16
 > 2.  151 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([8, 156, 512]) torch.float16
 > 2.  156 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([7, 250, 512]) torch.float16
 > 2.  250 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([749, 1]) torch.Size([749, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 147, 512]) torch.float16
 > 2.  147 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([8, 133, 512]) torch.float16
 > 2.  133 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([6, 292, 512]) torch.float16
 > 2.  292 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([786, 1]) torch.Size([786, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1280, 1]) torch.Size([1280, 1])
 > 1.  torch.Size([8, 209, 512]) torch.float16
 > 2.  209 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([144, 13, 512]) torch.float16
 > 2.  13 20 10 1
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([2160, 1]) torch.Size([2160, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([7, 259, 512]) torch.float16
 > 2.  259 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([952, 1]) torch.Size([952, 1])
 > 1.  torch.Size([32, 50, 512]) torch.float16
 > 2.  50 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([32, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1280, 1]) torch.Size([1280, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([8, 219, 512]) torch.float16
 > 2.  219 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([8, 161, 512]) torch.float16
 > 2.  161 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([16, 84, 512]) torch.float16
 > 2.  84 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([16, 106, 512]) torch.float16
 > 2.  106 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1200, 1]) torch.Size([1200, 1])
 > 1.  torch.Size([8, 153, 512]) torch.float16
 > 2.  153 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([16, 87, 512]) torch.float16
 > 2.  87 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 186, 512]) torch.float16
 > 2.  186 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([8, 206, 512]) torch.float16
 > 2.  206 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([8, 201, 512]) torch.float16
 > 2.  201 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([8, 200, 512]) torch.float16
 > 2.  200 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([872, 1]) torch.Size([872, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 145, 512]) torch.float16
 > 2.  145 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([48, 38, 512]) torch.float16
 > 2.  38 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 167, 512]) torch.float16
 > 2.  167 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([640, 1]) torch.Size([640, 1])
 > 1.  torch.Size([7, 237, 512]) torch.float16
 > 2.  237 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([721, 1]) torch.Size([721, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
2023-07-11 11:53:27 | INFO | train_inner | epoch 001:    102 / 1474 loss=13.853, trans_loss=5.625, nll_loss=4.213, w2v_ctc_loss=14.999, task_loss=0.431, contrastive_loss=3.305, total=4208.4, n_correct=200.14, ppl=18.54, accuracy=4.756, wps=13487.8, ups=1.08, wpb=12567.1, bsz=469.7, num_updates=100, lr=4.098e-06, gnorm=1.011, clip=0, loss_scale=32, train_wall=96, gb_free=16.4, wall=173
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([16, 84, 512]) torch.float16
 > 2.  84 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([16, 110, 512]) torch.float16
 > 2.  110 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([6, 284, 512]) torch.float16
 > 2.  284 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([702, 1]) torch.Size([702, 1])
 > 1.  torch.Size([7, 252, 512]) torch.float16
 > 2.  252 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([791, 1]) torch.Size([791, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([24, 66, 512]) torch.float16
 > 2.  66 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([104, 18, 512]) torch.float16
 > 2.  18 20 10 1
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([1872, 1]) torch.Size([1872, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 185, 512]) torch.float16
 > 2.  185 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([48, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1296, 1]) torch.Size([1296, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 139, 512]) torch.float16
 > 2.  139 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 181, 512]) torch.float16
 > 2.  181 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([5, 369, 512]) torch.float16
 > 2.  369 20 10 36
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([865, 1]) torch.Size([865, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([96, 19, 512]) torch.float16
 > 2.  19 20 10 1
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([1824, 1]) torch.Size([1824, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([88, 21, 512]) torch.float16
 > 2.  21 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1672, 1]) torch.Size([1672, 1])
 > 1.  torch.Size([40, 43, 512]) torch.float16
 > 2.  43 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([7, 258, 512]) torch.float16
 > 2.  258 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 153, 512]) torch.float16
 > 2.  153 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([8, 215, 512]) torch.float16
 > 2.  215 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([808, 1]) torch.Size([808, 1])
 > 1.  torch.Size([8, 166, 512]) torch.float16
 > 2.  166 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([16, 110, 512]) torch.float16
 > 2.  110 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([5, 357, 512]) torch.float16
 > 2.  357 20 10 35
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([845, 1]) torch.Size([845, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([72, 25, 512]) torch.float16
 > 2.  25 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1728, 1]) torch.Size([1728, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
torch.float16
 > 2.  203 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([48, 38, 512]) torch.float16
 > 2.  38 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1280, 1]) torch.Size([1280, 1])
 > 1.  torch.Size([8, 188, 512]) torch.float16
 > 2.  188 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 182, 512]) torch.float16
 > 2.  182 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([8, 207, 512]) torch.float16
 > 2.  207 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([8, 182, 512]) torch.float16
 > 2.  182 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([712, 1]) torch.Size([712, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([32, 49, 512]) torch.float16
 > 2.  49 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1520, 1]) torch.Size([1520, 1])
 > 1.  torch.Size([8, 182, 512]) torch.float16
 > 2.  182 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([8, 206, 512]) torch.float16
 > 2.  206 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([7, 244, 512]) torch.float16
 > 2.  244 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([763, 1]) torch.Size([763, 1])
 > 1.  torch.Size([40, 47, 512]) torch.float16
 > 2.  47 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([6, 308, 512]) torch.float16
 > 2.  308 20 10 30
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([8, 177, 512]) torch.float16
 > 2.  177 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([8, 215, 512]) torch.float16
 > 2.  215 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([6, 293, 512]) torch.float16
 > 2.  293 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([32, 49, 512]) torch.float16
 > 2.  49 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([5, 318, 512]) torch.float16
 > 2.  318 20 10 31
 > 6.  torch.Size([155, 512]) torch.float16
 > 7.  torch.Size([695, 1]) torch.Size([695, 1])
 > 1.  torch.Size([72, 26, 512]) torch.float16
 > 2.  26 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([8, 176, 512]) torch.float16
 > 2.  176 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([8, 234, 512]) torch.float16
 > 2.  234 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([16, 108, 512]) torch.float16
 > 2.  108 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([48, 35, 512]) torch.float16
 > 2.  35 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([40, 47, 512]) torch.float16
 > 2.  47 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1560, 1]) torch.Size([1560, 1])
 > 1.  torch.Size([16, 105, 512]) torch.float16
 > 2.  105 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.   > 2.  203 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([24, 73, 512]) torch.float16
 > 2.  73 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([805, 1]) torch.Size([805, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1320, 1]) torch.Size([1320, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([64, 28, 512]) torch.float16
 > 2.  28 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1536, 1]) torch.Size([1536, 1])
 > 1.  torch.Size([32, 54, 512]) torch.float16
 > 2.  54 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([7, 240, 512]) torch.float16
 > 2.  240 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([833, 1]) torch.Size([833, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([8, 189, 512]) torch.float16
 > 2.  189 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([32, 50, 512]) torch.float16
 > 2.  50 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1184, 1]) torch.Size([1184, 1])
 > 1.  torch.Size([56, 33, 512]) torch.float16
 > 2.  33 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1624, 1]) torch.Size([1624, 1])
 > 1.  torch.Size([24, 66, 512]) torch.float16
 > 2.  66 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([5, 328, 512]) torch.float16
 > 2.  328 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([730, 1]) torch.Size([730, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1000, 1]) torch.Size([1000, 1])
 > 1.  torch.Size([56, 31, 512]) torch.float16
 > 2.  31 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1232, 1]) torch.Size([1232, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([6, 294, 512]) torch.float16
 > 2.  294 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([804, 1]) torch.Size([804, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1320, 1]) torch.Size([1320, 1])
 > 1.  torch.Size([8, 218, 512]) torch.float16
 > 2.  218 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([16, 86, 512]) torch.float16
 > 2.  86 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([16, 108, 512]) torch.float16
 > 2.  108 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([24, 73, 512]) torch.float16
 > 2.  73 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([8, 130, 512]) torch.float16
 > 2.  130 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([6, 304, 512]) torch.float16
 > 2.  304 20 10 30
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([822, 1]) torch.Size([822, 1])
 > 1.  torch.Size([6, 291, 512]) torch.float16
 > 2.  291 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([732, 1]) torch.Size([732, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([56, 33, 512]) torch.float16
 > 2.  33 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1400, 1]) torch.Size([1400, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([7, 252, 512]) torch.float16
 > 2.  252 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([80, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([160, 512]) 131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 163, 512]) torch.float16
 > 2.  163 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 171, 512]) torch.float16
 > 2.  171 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([16, 86, 512]) torch.float16
 > 2.  86 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1184, 1]) torch.Size([1184, 1])
 > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 163, 512]) torch.float16
 > 2.  163 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 155, 512]) torch.float16
 > 2.  155 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([8, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([8, 152, 512]) torch.float16
 > 2.  152 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 202, 512]) torch.float16
 > 2.  202 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([72, 24, 512]) torch.float16
 > 2.  24 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1224, 1]) torch.Size([1224, 1])
 > 1.  torch.Size([40, 47, 512]) torch.float16
 > 2.  47 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([5, 336, 512]) torch.float16
 > 2.  336 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([655, 1]) torch.Size([655, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([8, 218, 512]) torch.float16
 > 2.  218 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([32, 54, 512]) torch.float16
 > 2.  54 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([6, 292, 512]) torch.float16
 > 2.  292 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([702, 1]) torch.Size([702, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([6, 291, 512]) torch.float16
 > 2.  291 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([8, 214, 512]) torch.float16
 > 2.  214 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([808, 1]) torch.Size([808, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([16, 88, 512]) torch.float16
 > 2.  88 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([8, 130, 512]) torch.float16
 > 2.  130 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([8, 177, 512]) torch.float16
 > 2.  177 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 172, 512]) torch.float16
 > 2.  172 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([7, 252, 512]) torch.float16
 > 2.  252 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([861, 1]) torch.Size([861, 1])
 > 1.  torch.Size([7, 251, 512]) torch.float16
 > 2.  251 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([16, 88, 512]) torch.float16
 > 2.  88 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([8, 133, 512]) torch.float16
 > 2.  133 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 170, 512]) torch.float16
 > 2.  170 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([64, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1856, 1]) torch.Size([1856, 1])
 > 1.  torch.Size([6, 275, 512]) torch.float16
 > 2.  275 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([702, 1]) torch.Size([702, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1200, 1]) torch.Size([1200, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1128, 1]) torch.Size([1128, 1])
 > 1.  torch.Size([8, 181, 512]) torch.float16
 > 2.  181 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1216, 1]) torch.Size([1216, 1])
 > 1.  torch.Size([7, 262, 512]) torch.float16
 > 2.  262 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16 45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([640, 1]) torch.Size([640, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 211, 512]) torch.float16
 > 2.  211 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([32, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([8, 156, 512]) torch.float16
 > 2.  156 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([8, 167, 512]) torch.float16
 > 2.  167 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([8, 162, 512]) torch.float16
 > 2.  162 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 182, 512]) torch.float16
 > 2.  182 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([5, 325, 512]) torch.float16
 > 2.  325 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([635, 1]) torch.Size([635, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 123, 512]) torch.float16
 > 2.  123 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([16, 107, 512]) torch.float16
 > 2.  107 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([7, 237, 512]) torch.float16
 > 2.  237 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([805, 1]) torch.Size([805, 1])
 > 1.  torch.Size([8, 188, 512]) torch.float16
 > 2.  188 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([40, 43, 512]) torch.float16
 > 2.  43 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([32, 47, 512]) torch.float16
 > 2.  47 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 145, 512]) torch.float16
 > 2.  145 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([8, 139, 512]) torch.float16
 > 2.  139 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([24, 74, 512]) torch.float16
 > 2.  74 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 210, 512]) torch.float16
 > 2.  210 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 208, 512]) torch.float16
 > 2.  208 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 144, 512]) torch.float16
 > 2.  144 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 174, 512]) torch.float16
 > 2.  174 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([7, 246, 512]) torch.float16
 > 2.  246 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([763, 1]) torch.Size([763, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1128, 1]) torch.Size([1128, 1])
 > 1.  torch.Size([24, 60, 512]) torch.float16
 > 2.  60 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 204, 512]) torch.float16
 > 2.  204 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([696, 1]) torch.Size([696, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([56, 32, 512]) torch.float16
 > 2.  32 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
153 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([112, 17, 512]) torch.float16
 > 2.  17 20 10 1
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1792, 1]) torch.Size([1792, 1])
 > 1.  torch.Size([16, 97, 512]) torch.float16
 > 2.  97 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([8, 182, 512]) torch.float16
 > 2.  182 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([24, 74, 512]) torch.float16
 > 2.  74 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 234, 512]) torch.float16
 > 2.  234 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([872, 1]) torch.Size([872, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([16, 84, 512]) torch.float16
 > 2.  84 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([32, 55, 512]) torch.float16
 > 2.  55 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1736, 1]) torch.Size([1736, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 155, 512]) torch.float16
 > 2.  155 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 150, 512]) torch.float16
 > 2.  150 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 183, 512]) torch.float16
 > 2.  183 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([104, 17, 512]) torch.float16
 > 2.  17 20 10 1
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([1456, 1]) torch.Size([1456, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([24, 78, 512]) torch.float16
 > 2.  78 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([8, 158, 512]) torch.float16
 > 2.  158 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([72, 26, 512]) torch.float16
 > 2.  26 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([80, 23, 512]) torch.float16
 > 2.  23 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1600, 1]) torch.Size([1600, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([7, 236, 512]) torch.float16
 > 2.  236 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([160, 12, 512]) torch.float16
 > 2.  12 20 10 1
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([2240, 1]) torch.Size([2240, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 87, 512]) torch.float16
 > 2.  87 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([6, 273, 512]) torch.float16
 > 2.  273 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([714, 1]) torch.Size([714, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([8, 188, 512]) torch.float16
 > 2.  188 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([32, 49, 512]) torch.float16
 > 2.  49 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 110, 512]) torch.float16
 > 2.  110 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([5, 333, 512]) torch.float16
 > 2.  333 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([755, 1]) torch.Size([755, 1])
 > 1.  torch.Size([5, 340, 512]) torch.float16
 > 2.  340 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([745, 1]) torch.Size([745, 1])
 > 1.  torch.Size([8, 144, 512]) torch.float16
 > 2.  144 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([6, 297, 512]) torch.float16
 > 2.  297 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([756, 1]) torch.Size([756, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 192, 512]) torch.float16
 > 2.  192 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([8, 170, 512]) torch.float16
 > 2.  170 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 144, 512]) torch.float16
 > 2.  144 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([40, 43, 512]) torch.float16
 > 2.  43 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([6, 288, 512]) torch.float16
 > 2.  288 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([96, 19, 512]) torch.float16
 > 2.  19 20 10 1
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([1824, 1]) torch.Size([1824, 1])
 > 1.  torch.Size([104, 18, 512]) torch.float16
 > 2.  18 20 10 1
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([1768, 1]) torch.Size([1768, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 145, 512]) torch.float16
 > 2.  145 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([6, 282, 512]) torch.float16
 > 2.  282 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([72, 25, 512]) torch.float16
 > 2.  25 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1656, 1]) torch.Size([1656, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([5, 326, 512]) torch.float16
 > 2.  326 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([780, 1]) torch.Size([780, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 205, 512]) torch.float16
 > 2.  205 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1480, 1]) torch.Size([1480, 1])
 > 1.  torch.Size([8, 161, 512]) torch.float16
 > 2.  161 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([6, 278, 512]) torch.float16
 > 2.  278 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([708, 1]) torch.Size([708, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 144, 512]) torch.float16
 > 2.  144 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([32, 52, 512]) torch.float16
 > 2.  52 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([8, 152, 512]) torch.float16
 > 2.  152 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([8, 228, 512]) torch.float16
 > 2.  228 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([8, 151, 512]) torch.float16
 > 2.  151 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([8, 209, 512]) torch.float16
 > 2.  209 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([712, 1]) torch.Size([712, 1])
 > 1.  torch.Size([16, 110, 512]) torch.float16
 > 2.  110 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1184, 1]) torch.Size([1184, 1])
 > 1.  torch.Size([5, 372, 512]) torch.float16
 > 2.  372 20 10 37
 > 6.  torch.Size([185, 512]) torch.float16
 > 7.  torch.Size([835, 1]) torch.Size([835, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([424, 1]) torch.Size([424, 1])
 > 1.  torch.Size([88, 20, 512]) torch.float16
 > 2.  20 20 10 1
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([1496, 1]) torch.Size([1496, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([32, 54, 512]) torch.float16
 > 2.  54 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([216, 9, 512]) torch.float16
 > 2.  9 20 10 1
 > 6.  torch.Size([216, 512]) torch.float16
 > 7.  torch.Size([3888, 1]) torch.Size([3888, 1])
 > 1.  torch.Size([5, 346, 512]) torch.float16
 > 2.  346 20 10 34
 > 6.  torch.Size([170, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([6, 276, 512]) torch.float16
 > 2.  276 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([708, 1]) torch.Size([708, 1])
 > 1.  torch.Size([16, 87, 512]) torch.float16
 > 2.  87 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 139, 512]) torch.float16
 > 2.  139 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 186, 512]) torch.float16
 > 2.  186 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([8, 133, 512]) torch.float16
 > 2.  133 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([408, 1]) torch.Size([408, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 123, 512]) torch.float16
 > 2.  123 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 216, 512]) torch.float16
 > 2.  216 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([6, 265, 512]) torch.float16
 > 2.  265 20 10 26
 > 6.  torch.Size([156, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([8, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([144, 13, 512]) torch.float16
 > 2.  13 20 10 1
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([2016, 1]) torch.Size([2016, 1])
 > 1.  torch.Size([8, 151, 512]) torch.float16
 > 2.  151 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([8, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([7, 205, 512]) torch.float16
 > 2.  205 20 10 20
 > 6.  torch.Size([140, 512]) torch.float16
 > 7.  torch.Size([714, 1]) torch.Size([714, 1])
 > 1.  torch.Size([8, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([80, 512]) torch.float16
 > 7.   > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([80, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1840, 1]) torch.Size([1840, 1])
 > 1.  torch.Size([8, 147, 512]) torch.float16
 > 2.  147 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([48, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1296, 1]) torch.Size([1296, 1])
 > 1.  torch.Size([7, 242, 512]) torch.float16
 > 2.  242 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([749, 1]) torch.Size([749, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([5, 320, 512]) torch.float16
 > 2.  320 20 10 31
 > 6.  torch.Size([155, 512]) torch.float16
 > 7.  torch.Size([640, 1]) torch.Size([640, 1])
 > 1.  torch.Size([8, 162, 512]) torch.float16
 > 2.  162 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([5, 374, 512]) torch.float16
 > 2.  374 20 10 37
 > 6.  torch.Size([185, 512]) torch.float16
 > 7.  torch.Size([890, 1]) torch.Size([890, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 192, 512]) torch.float16
 > 2.  192 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([32, 52, 512]) torch.float16
 > 2.  52 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 129, 512]) torch.float16
 > 2.  129 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([432, 1]) torch.Size([432, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([8, 130, 512]) torch.float16
 > 2.  130 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([40, 43, 512]) torch.float16
 > 2.  43 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1520, 1]) torch.Size([1520, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 207, 512]) torch.float16
 > 2.  207 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([824, 1]) torch.Size([824, 1])
 > 1.  torch.Size([8, 158, 512]) torch.float16
 > 2.  158 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 187, 512]) torch.float16
 > 2.  187 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 233, 512]) torch.float16
 > 2.  233 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([808, 1]) torch.Size([808, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([80, 24, 512]) torch.float16
 > 2.  24 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1600, 1]) torch.Size([1600, 1])
 > 1.  torch.Size([16, 106, 512]) torch.float16
 > 2.  106 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([32, 49, 512]) torch.float16
 > 2.  49 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 133, 512]) torch.float16
 > 2.  133 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 111, 512]) torch.float16
 > 2.  111torch.float16
 > 7.  torch.Size([1920, 1]) torch.Size([1920, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1200, 1]) torch.Size([1200, 1])
 > 1.  torch.Size([8, 153, 512]) torch.float16
 > 2.  153 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([8, 160, 512]) torch.float16
 > 2.  160 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 171, 512]) torch.float16
 > 2.  171 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([5, 342, 512]) torch.float16
 > 2.  342 20 10 34
 > 6.  torch.Size([170, 512]) torch.float16
 > 7.  torch.Size([695, 1]) torch.Size([695, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([5, 324, 512]) torch.float16
 > 2.  324 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([8, 161, 512]) torch.float16
 > 2.  161 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([48, 34, 512]) torch.float16
 > 2.  34 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([432, 1]) torch.Size([432, 1])
 > 1.  torch.Size([8, 193, 512]) torch.float16
 > 2.  193 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([712, 1]) torch.Size([712, 1])
 > 1.  torch.Size([8, 123, 512]) torch.float16
 > 2.  123 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([5, 322, 512]) torch.float16
 > 2.  322 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([675, 1]) torch.Size([675, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([6, 288, 512]) torch.float16
 > 2.  288 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([48, 35, 512]) torch.float16
 > 2.  35 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([5, 335, 512]) torch.float16
 > 2.  335 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([765, 1]) torch.Size([765, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 123, 512]) torch.float16
 > 2.  123 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 231, 512]) torch.float16
 > 2.  231 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([8, 197, 512]) torch.float16
 > 2.  197 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 188, 512]) torch.float16
 > 2.  188 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([16, 108, 512]) torch.float16
 > 2.  108 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([24, 73, 512]) torch.float16
 > 2.  73 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1224, 1]) torch.Size([1224, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([8, 183, 512]) torch.float16
 > 2.  183 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([7, 228, 512]) torch.float16
 > 2.  228 20 10 22
 > 6.  torch.Size([154, 512]) torch.float16
 > 7.  torch.Size([763, 1]) torch.Size([763, 1])
 > 1.  torch.Size([8, 151, 512]) torch.float16
 > 2.  151 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([16, 86, 512]) torch.float16
 > 2.  86 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([7, 216, 512]) torch.float16
 > 2.  216 20 10 21
 > 6.  torch.Size([147, 512]) torch.float16
 > 7.  torch.Size([875, 1]) torch.Size([875, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) 
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([8, 189, 512]) torch.float16
 > 2.  189 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([32, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([7, 247, 512]) torch.float16
 > 2.  247 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([805, 1]) torch.Size([805, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([8, 200, 512]) torch.float16
 > 2.  200 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([48, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 152, 512]) torch.float16
 > 2.  152 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([8, 226, 512]) torch.float16
 > 2.  226 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 151, 512]) torch.float16
 > 2.  151 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([8, 139, 512]) torch.float16
 > 2.  139 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([24, 66, 512]) torch.float16
 > 2.  66 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([56, 33, 512]) torch.float16
 > 2.  33 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1288, 1]) torch.Size([1288, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([32, 54, 512]) torch.float16
 > 2.  54 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([32, 50, 512]) torch.float16
 > 2.  50 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([120, 16, 512]) torch.float16
 > 2.  16 20 10 1
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1920, 1]) torch.Size([1920, 1])
 > 1.  torch.Size([8, 216, 512]) torch.float16
 > 2.  216 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([776, 1]) torch.Size([776, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([7, 253, 512]) torch.float16
 > 2.  253 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([756, 1]) torch.Size([756, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([24, 78, 512]) torch.float16
 > 2.  78 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([6, 284, 512]) torch.float16
 > 2.  284 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([64, 27, 512]) torch.float16
 > 2.  27 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1216, 1]) torch.Size([1216, 1])
 > 1.  torch.Size([16, 116, 512]) torch.float16
 > 2.  116 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([32, 50, 512]) torch.float16
 > 2.  50 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([16, 88, 512]) torch.float16
 > 2.  88 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 156, 512]) torch.float16
 > 2.  156 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 129, 512]) torch.float16
 > 2.  129 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([112, 17, 512]) torch.float16
 > 2.  17 20 10 1
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1792, 1]) torch.Size([1792, 1])
 > 1.  torch.Size([6, 270, 512]) torch.float16
 > 2.  270 20 10 26
 > 6.  torch.Size([156, 512]) torch.float16
 > 7.  torch.Size([786, 1]) torch.Size([786, 1])
 > 1.  torch.Size([8, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([16, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([32, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.   > 7.  torch.Size([1400, 1]) torch.Size([1400, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 105, 512]) torch.float16
 > 2.  105 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([24, 60, 512]) torch.float16
 > 2.  60 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 158, 512]) torch.float16
 > 2.  158 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([7, 253, 512]) torch.float16
 > 2.  253 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([791, 1]) torch.Size([791, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([7, 249, 512]) torch.float16
 > 2.  249 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([763, 1]) torch.Size([763, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([64, 27, 512]) torch.float16
 > 2.  27 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1408, 1]) torch.Size([1408, 1])
 > 1.  torch.Size([8, 179, 512]) torch.float16
 > 2.  179 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([7, 236, 512]) torch.float16
 > 2.  236 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([8, 196, 512]) torch.float16
 > 2.  196 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([712, 1]) torch.Size([712, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 106, 512]) torch.float16
 > 2.  106 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([24, 73, 512]) torch.float16
 > 2.  73 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([16, 106, 512]) torch.float16
 > 2.  106 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 183, 512]) torch.float16
 > 2.  183 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([32, 52, 512]) torch.float16
 > 2.  52 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 171, 512]) torch.float16
 > 2.  171 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 175, 512]) torch.float16
 > 2.  175 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([8, 221, 512]) torch.float16
 > 2.  221 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([32, 55, 512]) torch.float16
 > 2.  55 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 152, 512]) torch.float16
 > 2.  152 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([24, 73, 512]) torch.float16
 > 2.  73 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([8, 203, 512]) torch.float16
 > 2.  203 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([7, 255, 512]) torch.float16
 > 2.  255 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([847, 1]) torch.Size([847, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([928, 1]) torch.Size([928, 1])
 > 1.  torch.Size([8, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([16, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([8, 180, 512]) torch.float16
 > 2.  180 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([8, 234, 512]) torch.float16
 > 2.  234 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 223, 512]) torch.float16
 > 2.  223 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([48, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 152, 512]) torch.float16
 > 2.  152 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([40, 41, 512]) torch.float16
 > 2.  41 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1280, 1]) torch.Size([1280, 1])
 > 1.  torch.Size([8, 145, 512]) torch.float16
 > 2.  145 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 230, 512]) torch.float16
 > 2.  230 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([8, 203, 512]) torch.float16
 > 2.  203 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([776, 1]) torch.Size([776, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([32, 49, 512]) torch.float16
 > 2.  49 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1176, 1]) torch.Size([1176, 1])
 > 1.  torch.Size([32, 55, 512]) torch.float16
 > 2.  55 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1216, 1]) torch.Size([1216, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([8, 225, 512]) torch.float16
 > 2.  225 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([872, 1]) torch.Size([872, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 175, 512]) torch.float16
 > 2.  175 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([8, 123, 512]) torch.float16
 > 2.  123 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 217, 512]) torch.float16
 > 2.  217 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([16, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([16, 97, 512]) torch.float16
 > 2.  97 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([24, 73, 512]) torch.float16
 > 2.  73 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([80, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1680, 1]) torch.Size([1680, 1])
 > 1.  torch.Size([6, 307, 512]) torch.float16
 > 2.  307 20 10 30
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([8, 226, 512]) torch.float16
 > 2.  226 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 147, 512]) torch.float16
 > 2.  147 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([48, 38, 512]) torch.float16
 > 2.  38 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([7, 235, 512]) torch.float16
 > 2.  235 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([6, 273, 512]) torch.float16
 > 2.  273 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([780, 1]) torch.Size([780, 1])
 > 1.  torch.Size([6, 277, 512]) torch.float16
 > 2.  277 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([738, 1]) torch.Size([738, 1])
 > 1.  torch.Size([16, 108, 512]) torch.float16
 > 2.  108 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([8, 133, 512]) torch.float16
 > 2.  133 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1512, 1]) torch.Size([1512, 1])
 > 1.  torch.Size([56, 32, 512]) torch.float16
 > 2.  32 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1400, 1]) torch.Size([1400, 1])
 > 1.  torch.Size([8, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([72, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([48, 35, 512]) torch.float16
 > 2.  35 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([16, 91, 512]) torch.float16
 > 2.  91 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([8, 160, 512]) torch.float16
 > 2.  160 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([777, 1]) torch.Size([777, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([8, 181, 512]) torch.float16
 > 2.  181 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([32, 50, 512]) torch.float16
 > 2.  50 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1216, 1]) torch.Size([1216, 1])
 > 1.  torch.Size([7, 240, 512]) torch.float16
 > 2.  240 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([749, 1]) torch.Size([749, 1])
 > 1.  torch.Size([16, 105, 512]) torch.float16
 > 2.  105 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 106, 512]) torch.float16
 > 2.  106 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([32, 55, 512]) torch.float16
 > 2.  55 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 170, 512]) torch.float16
 > 2.  170 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1280, 1]) torch.Size([1280, 1])
 > 1.  torch.Size([8, 129, 512]) torch.float16
 > 2.  129 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([32, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([16, 116, 512]) torch.float16
 > 2.  116 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([5, 374, 512]) torch.float16
 > 2.  374 20 10 37
 > 6.  torch.Size([185, 512]) torch.float16
 > 7.  torch.Size([920, 1]) torch.Size([920, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([72, 26, 512]) torch.float16
 > 2.  26 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1872, 1]) torch.Size([1872, 1])
 > 1.  torch.Size([24, 74, 512]) torch.float16
 > 2.  74 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([32, 50, 512]) torch.float16
 > 2.  50 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([88, 21, 512]) torch.float16
 > 2.  21 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1760, 1]) torch.Size([1760, 1])
 > 1.  torch.Size([8, 213, 512]) torch.float16
 > 2.  213 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 162, 512]) torch.float16
 > 2.  162 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([24, 66, 512]) torch.float16
 > 2.  66 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([5, 294, 512]) torch.float16
 > 2.  294 20 10 29
 > 6.  torch.Size([145, 512]) torch.float16
 > 7.  torch.Size([675, 1]) torch.Size([675, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([48, 34, 512]) torch.float16
 > 2.  34 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1200, 1]) torch.Size([1200, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([7, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([133, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.   > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([6, 310, 512]) torch.float16
 > 2.  310 20 10 30
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([858, 1]) torch.Size([858, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([24, 73, 512]) torch.float16
 > 2.  73 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 221, 512]) torch.float16
 > 2.  221 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([5, 375, 512]) torch.float16
 > 2.  375 20 10 37
 > 6.  torch.Size([185, 512]) torch.float16
 > 7.  torch.Size([1125, 1]) torch.Size([1125, 1])
 > 1.  torch.Size([16, 86, 512]) torch.float16
 > 2.  86 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 127, 512]) torch.float16
 > 2.  127 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([432, 1]) torch.Size([432, 1])
 > 1.  torch.Size([24, 66, 512]) torch.float16
 > 2.  66 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([7, 265, 512]) torch.float16
 > 2.  265 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16
 > 7.  torch.Size([812, 1]) torch.Size([812, 1])
 > 1.  torch.Size([16, 116, 512]) torch.float16
 > 2.  116 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([88, 21, 512]) torch.float16
 > 2.  21 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([8, 178, 512]) torch.float16
 > 2.  178 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([8, 197, 512]) torch.float16
 > 2.  197 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([32, 55, 512]) torch.float16
 > 2.  55 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([16, 88, 512]) torch.float16
 > 2.  88 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 110, 512]) torch.float16
 > 2.  110 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([48, 38, 512]) torch.float16
 > 2.  38 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1296, 1]) torch.Size([1296, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([40, 41, 512]) torch.float16
 > 2.  41 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([8, 144, 512]) torch.float16
 > 2.  144 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([32, 54, 512]) torch.float16
 > 2.  54 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 162, 512]) torch.float16
 > 2.  162 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1176, 1]) torch.Size([1176, 1])
 > 1.  torch.Size([64, 27, 512]) torch.float16
 > 2.  27 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1216, 1]) torch.Size([1216, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([8, 145, 512]) torch.float16
 > 2.  145 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([5, 343, 512]) torch.float16
 > 2.  343 20 10 34
 > 6.  torch.Size([170, 512]) torch.float16
 > 7.  torch.Size([795, 1]) torch.Size([795, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([72, 25, 512]) torch.float16
 > 2.  25 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1368, 1]) torch.Size([1368, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([104, 17, 512]) torch.float16
 > 2.  17 20 10 1
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([1768, 1]) torch.Size([1768, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([40, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  Traceback (most recent call last):
  File "/workspace/fairseq-AT/fairseq_cli/train.py", line 30, in <module>
    from fairseq import checkpoint_utils, options, quantization_utils, tasks, utils
  File "/workspace/fairseq-AT/fairseq/__init__.py", line 32, in <module>
    import fairseq.criterions  # noqa
  File "/workspace/fairseq-AT/fairseq/criterions/__init__.py", line 35, in <module>
    importlib.import_module("fairseq.criterions." + file_name)
  File "/usr/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "/workspace/fairseq-AT/fairseq/criterions/label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT.py", line 366
    * (1 if self.at_level == "token" else 10)
    ^
IndentationError: unexpected indent
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 0): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 2): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 1): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 4): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 7): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 7
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 6): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 5): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | distributed init (rank 3): tcp://localhost:19320
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 1
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 2
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 4
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 0
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 6
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 3
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 3
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 5
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 5: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 5
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 0
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 7: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 7
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 6: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 6
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | torch.distributed.distributed_c10d | Rank 4: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 1
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 2
2023-07-11 11:56:06 | INFO | fairseq.distributed.utils | initialized host capios as rank 4
2023-07-11 11:56:08 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': True, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': True, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 8, 'distributed_num_procs': 8, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': 'tcp://localhost:19320', 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'no_c10d', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 8, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': True, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 2, 'skip_invalid_size_inputs_valid_test': True, 'max_tokens': 15000, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train_st,train_asr,train_mt', 'valid_subset': 'dev_st', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 15000, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 100, 'max_update': 60000, 'stop_time_hours': 0.0, 'clip_norm': 10.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.0002], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 2000, 'keep_interval_updates': 5, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': 2, 'keep_best_checkpoints': 10, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'bleu', 'maximize_best_checkpoint_metric': True, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 8}, 'generation': {'_name': None, 'beam': 5, 'beam_mt': 0, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'max_len_a_mt': 0.0, 'max_len_b_mt': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'lenpen_mt': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='s2t_joint', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'task': Namespace(_name='joint_triple_pretraining', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'criterion': Namespace(_name='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9,0.98)', 'adam_eps': 1e-08, 'weight_decay': 0.0, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [0.0002]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 5000, 'warmup_init_lr': 1e-07, 'lr': [0.0002]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'simul_type': None}
2023-07-11 11:56:08 | INFO | fairseq.tasks.joint_triple_pretraining | dictionary size (dict.wrd.txt): 10,000
2023-07-11 11:56:08 | INFO | fairseq.tasks.joint_triple_pretraining | asr dictionary size (dict.wrd.txt): 10,000
2023-07-11 11:56:08 | INFO | fairseq.tasks.joint_triple_pretraining | cluster dictionary size (kmeans100.convert.txt): 5,224
2023-07-11 11:56:08 | INFO | fairseq.tasks.joint_triple_pretraining | Initial task weight: asr 1.0: mt 1.0
2023-07-11 11:56:08 | INFO | root | load pretrained embeddings: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 11:56:13 | INFO | fairseq.tasks.hubert_pretraining | current directory is /workspace/fairseq-AT/egs/pretrain-all
2023-07-11 11:56:13 | INFO | fairseq.tasks.hubert_pretraining | HubertPretrainingTask Config {'_name': 'hubert_pretraining', 'data': 'data_all_ende_lcrm', 'fine_tuning': False, 'labels': ['layer6.km500'], 'label_dir': None, 'label_rate': 50.0, 'sample_rate': 16000, 'normalize': False, 'enable_padding': False, 'max_keep_size': None, 'max_sample_size': 250000, 'min_sample_size': 32000, 'single_target': False, 'random_crop': True, 'pad_audio': False}
2023-07-11 11:56:13 | INFO | fairseq.models.hubert.hubert | HubertModel Config: {'_name': 'hubert', 'label_rate': 50.0, 'extractor_mode': default, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': gelu, 'layer_type': transformer, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.1, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.1, 'final_dim': 256, 'untie_final_proj': False, 'layer_norm_first': False, 'conv_feature_layers': '[(512,10,5)] + [(512,3,2)] * 4 + [(512,2,2)] * 2', 'conv_bias': False, 'logit_temp': 0.1, 'target_glu': False, 'feature_grad_mult': 0.0, 'mask_length': 10, 'mask_prob': 0.5, 'mask_selection': static, 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'mask_channel_length': 6, 'mask_channel_prob': 0.25, 'mask_channel_selection': static, 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'conv_pos': 128, 'conv_pos_groups': 16, 'latent_temp': [2.0, 0.5, 0.999995], 'skip_masked': False, 'skip_nomask': False, 'checkpoint_activations': False, 'required_seq_len_multiple': 2, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': True}
2023-07-11 11:56:14 | INFO | root | load pretrained hubert
2023-07-11 11:56:18 | INFO | root | load pretrained embedding as ctc proj: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 11:56:19 | INFO | root | load pretrained encoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 11:56:22 | INFO | root | load pretrained decoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 11:56:22 | INFO | root | share the sematic adapter and textual encoder
2023-07-11 11:56:22 | INFO | fairseq_cli.train | S2TJoint(
  (acoustic_encoder): AcousticEncoder(
    (compress_ffn): Linear(in_features=768, out_features=512, bias=True)
    (proj): Linear(in_features=512, out_features=10000, bias=False)
    (w2v_model): HubertModel(
      (feature_extractor): ConvFeatureExtractionModel(
        (conv_layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(1, 512, kernel_size=(10,), stride=(5,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): Fp32GroupNorm(512, 512, eps=1e-05, affine=True)
            (3): GELU(approximate='none')
          )
          (1-4): 4 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(3,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
          (5-6): 2 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(2,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
        )
      )
      (post_extract_proj): Linear(in_features=512, out_features=768, bias=True)
      (dropout_input): Dropout(p=0.0, inplace=False)
      (dropout_features): Dropout(p=0.1, inplace=False)
      (encoder): TransformerEncoder(
        (pos_conv): Sequential(
          (0): Conv1d(768, 768, kernel_size=(128,), stride=(1,), padding=(64,), groups=16)
          (1): SamePad()
          (2): GELU(approximate='none')
        )
        (layers): ModuleList(
          (0-11): 12 x TransformerSentenceEncoderLayer(
            (self_attn): MultiheadAttention(
              (dropout_module): FairseqDropout()
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
        (layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      (final_proj): None
    )
    (noad): NormalAdapter(
      (subsample): Conv1dSubsampler(
        (conv_layers): ModuleList(
          (0): Conv1d(512, 512, kernel_size=(5,), stride=(2,), padding=(2,))
          (1): Conv1d(256, 1024, kernel_size=(5,), stride=(2,), padding=(2,))
        )
      )
      (layers): ModuleList()
    )
    (sead): SemanticAdapter(
      (embed_positions): SinusoidalPositionalEmbedding()
      (layers): ModuleList(
        (0-5): 6 x TransformerEncoderLayerBase(
          (self_attn): MultiheadAttention(
            (dropout_module): FairseqDropout()
            (k_proj): Linear(in_features=512, out_features=512, bias=True)
            (v_proj): Linear(in_features=512, out_features=512, bias=True)
            (q_proj): Linear(in_features=512, out_features=512, bias=True)
            (out_proj): Linear(in_features=512, out_features=512, bias=True)
          )
          (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (dropout_module): FairseqDropout()
          (activation_dropout_module): FairseqDropout()
          (fc1): Linear(in_features=512, out_features=1024, bias=True)
          (fc2): Linear(in_features=1024, out_features=512, bias=True)
          (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
    (final_dropout): Dropout(p=0.1, inplace=False)
    (shrink_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (textual_encoder): MTModelEncoder(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (decoder): TransformerDecoderScriptable(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (output_projection): Linear(in_features=512, out_features=10000, bias=False)
  )
  (task_net): TaskNetwork(
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (down_proj): Linear(in_features=512, out_features=256, bias=True)
    (up_proj): Linear(in_features=256, out_features=512, bias=True)
    (dropout_module): FairseqDropout()
    (task_proj): Linear(in_features=512, out_features=1, bias=False)
  )
)
2023-07-11 11:56:22 | INFO | fairseq_cli.train | task: JointTriplePretrainingTask
2023-07-11 11:56:22 | INFO | fairseq_cli.train | model: S2TJoint
2023-07-11 11:56:22 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropywithW2vCtcShrinkJointAT
2023-07-11 11:56:22 | INFO | fairseq_cli.train | num. shared model params: 134,449,280 (num. trained: 134,449,280)
2023-07-11 11:56:22 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
2023-07-11 11:56:22 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 11:56:22 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:56:22 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:56:22 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="dev_st", n_samples=1418, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:56:31 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:2 to store for rank: 0
2023-07-11 11:56:31 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:2 with 8 nodes.
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- textual_encoder.embed_tokens.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.embed_tokens.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.output_projection.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.0.0.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.1.0.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.2.0.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.3.0.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.4.0.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.5.0.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.6.0.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- decoder.output_projection.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- task_net.task_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.weight <- textual_encoder.layers.0.self_attn.k_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.bias <- textual_encoder.layers.0.self_attn.k_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.weight <- textual_encoder.layers.0.self_attn.v_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.bias <- textual_encoder.layers.0.self_attn.v_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.weight <- textual_encoder.layers.0.self_attn.q_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.bias <- textual_encoder.layers.0.self_attn.q_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.weight <- textual_encoder.layers.0.self_attn.out_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.bias <- textual_encoder.layers.0.self_attn.out_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.weight <- textual_encoder.layers.0.self_attn_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.bias <- textual_encoder.layers.0.self_attn_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.weight <- textual_encoder.layers.0.fc1.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.bias <- textual_encoder.layers.0.fc1.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.weight <- textual_encoder.layers.0.fc2.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.bias <- textual_encoder.layers.0.fc2.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.weight <- textual_encoder.layers.0.final_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.bias <- textual_encoder.layers.0.final_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.weight <- textual_encoder.layers.1.self_attn.k_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.bias <- textual_encoder.layers.1.self_attn.k_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.weight <- textual_encoder.layers.1.self_attn.v_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.bias <- textual_encoder.layers.1.self_attn.v_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.weight <- textual_encoder.layers.1.self_attn.q_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.bias <- textual_encoder.layers.1.self_attn.q_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.weight <- textual_encoder.layers.1.self_attn.out_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.bias <- textual_encoder.layers.1.self_attn.out_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.weight <- textual_encoder.layers.1.self_attn_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.bias <- textual_encoder.layers.1.self_attn_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.weight <- textual_encoder.layers.1.fc1.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.bias <- textual_encoder.layers.1.fc1.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.weight <- textual_encoder.layers.1.fc2.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.bias <- textual_encoder.layers.1.fc2.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.weight <- textual_encoder.layers.1.final_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.bias <- textual_encoder.layers.1.final_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.weight <- textual_encoder.layers.2.self_attn.k_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.bias <- textual_encoder.layers.2.self_attn.k_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.weight <- textual_encoder.layers.2.self_attn.v_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.bias <- textual_encoder.layers.2.self_attn.v_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.weight <- textual_encoder.layers.2.self_attn.q_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.bias <- textual_encoder.layers.2.self_attn.q_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.weight <- textual_encoder.layers.2.self_attn.out_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.bias <- textual_encoder.layers.2.self_attn.out_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.weight <- textual_encoder.layers.2.self_attn_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.bias <- textual_encoder.layers.2.self_attn_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.weight <- textual_encoder.layers.2.fc1.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.bias <- textual_encoder.layers.2.fc1.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.weight <- textual_encoder.layers.2.fc2.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.bias <- textual_encoder.layers.2.fc2.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.weight <- textual_encoder.layers.2.final_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.bias <- textual_encoder.layers.2.final_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.weight <- textual_encoder.layers.3.self_attn.k_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.bias <- textual_encoder.layers.3.self_attn.k_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.weight <- textual_encoder.layers.3.self_attn.v_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.bias <- textual_encoder.layers.3.self_attn.v_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.weight <- textual_encoder.layers.3.self_attn.q_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.bias <- textual_encoder.layers.3.self_attn.q_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.weight <- textual_encoder.layers.3.self_attn.out_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.bias <- textual_encoder.layers.3.self_attn.out_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.weight <- textual_encoder.layers.3.self_attn_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.bias <- textual_encoder.layers.3.self_attn_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.weight <- textual_encoder.layers.3.fc1.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.bias <- textual_encoder.layers.3.fc1.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.weight <- textual_encoder.layers.3.fc2.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.bias <- textual_encoder.layers.3.fc2.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.weight <- textual_encoder.layers.3.final_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.bias <- textual_encoder.layers.3.final_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.weight <- textual_encoder.layers.4.self_attn.k_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.bias <- textual_encoder.layers.4.self_attn.k_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.weight <- textual_encoder.layers.4.self_attn.v_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.bias <- textual_encoder.layers.4.self_attn.v_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.weight <- textual_encoder.layers.4.self_attn.q_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.bias <- textual_encoder.layers.4.self_attn.q_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.weight <- textual_encoder.layers.4.self_attn.out_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.bias <- textual_encoder.layers.4.self_attn.out_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.weight <- textual_encoder.layers.4.self_attn_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.bias <- textual_encoder.layers.4.self_attn_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.weight <- textual_encoder.layers.4.fc1.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.bias <- textual_encoder.layers.4.fc1.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.weight <- textual_encoder.layers.4.fc2.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.bias <- textual_encoder.layers.4.fc2.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.weight <- textual_encoder.layers.4.final_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.bias <- textual_encoder.layers.4.final_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.weight <- textual_encoder.layers.5.self_attn.k_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.bias <- textual_encoder.layers.5.self_attn.k_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.weight <- textual_encoder.layers.5.self_attn.v_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.bias <- textual_encoder.layers.5.self_attn.v_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.weight <- textual_encoder.layers.5.self_attn.q_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.bias <- textual_encoder.layers.5.self_attn.q_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.weight <- textual_encoder.layers.5.self_attn.out_proj.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.bias <- textual_encoder.layers.5.self_attn.out_proj.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.weight <- textual_encoder.layers.5.self_attn_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.bias <- textual_encoder.layers.5.self_attn_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.weight <- textual_encoder.layers.5.fc1.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.bias <- textual_encoder.layers.5.fc1.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.weight <- textual_encoder.layers.5.fc2.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.bias <- textual_encoder.layers.5.fc2.bias
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.weight <- textual_encoder.layers.5.final_layer_norm.weight
2023-07-11 11:56:31 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.bias <- textual_encoder.layers.5.final_layer_norm.bias
2023-07-11 11:56:31 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   0: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   1: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   2: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   3: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   4: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   5: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   6: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | rank   7: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 11:56:31 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 11:56:31 | INFO | fairseq_cli.train | training on 8 devices (GPUs/TPUs)
2023-07-11 11:56:31 | INFO | fairseq_cli.train | max tokens per device = 15000 and max sentences per device = None
2023-07-11 11:56:31 | INFO | fairseq.trainer | Preparing to load checkpoint ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 11:56:31 | INFO | fairseq.trainer | No existing checkpoint found ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 11:56:31 | INFO | fairseq.trainer | loading train data for epoch 1
2023-07-11 11:56:31 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 11:56:31 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:56:31 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 11:56:33 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_mt", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:56:34 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_asr", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:56:36 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_st", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 11:57:41 | INFO | fairseq.data.iterators | grouped total_num_itrs = 1474
2023-07-11 11:57:41 | INFO | fairseq.trainer | begin training epoch 1
2023-07-11 11:57:41 | INFO | fairseq_cli.train | Start iterating over samples
 > 1.  torch.Size([8, 158, 512]) torch.float16
 > 2.  158 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
2023-07-11 11:57:51 | INFO | fairseq.trainer | NOTE: gradient overflow detected, ignoring gradient, setting loss scale to: 64.0
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 217, 512]) torch.float16
 > 2.  217 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([5, 353, 512]) torch.float16
 > 2.  353 20 10 35
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([845, 1]) torch.Size([845, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 222, 512]) torch.float16
 > 2.  222 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 198, 512]) torch.float16
 > 2.  198 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([152, 13, 512]) torch.float16
 > 2.  13 20 10 1
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([2432, 1]) torch.Size([2432, 1])
2023-07-11 11:58:08 | INFO | fairseq.trainer | NOTE: gradient overflow detected, ignoring gradient, setting loss scale to: 32.0
 > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([80, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1520, 1]) torch.Size([1520, 1])
 > 1.  torch.Size([8, 183, 512]) torch.float16
 > 2.  183 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([40, 42, 512]) torch.float16
 > 2.  42 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([5, 358, 512]) torch.float16
 > 2.  358 20 10 35
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([750, 1]) torch.Size([750, 1])
 > 1.  torch.Size([8, 179, 512]) torch.float16
 > 2.  179 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([8, 191, 512]) torch.float16
 > 2.  191 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([696, 1]) torch.Size([696, 1])
 > 1.  torch.Size([56, 31, 512]) torch.float16
 > 2.  31 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1232, 1]) torch.Size([1232, 1])
 > 1.  torch.Size([8, 161, 512]) torch.float16
 > 2.  161 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([528, 1]) torch.Size([528, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 196, 512]) torch.float16
 > 2.  196 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([7, 261, 512]) torch.float16
 > 2.  261 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16
 > 7.  torch.Size([791, 1]) torch.Size([791, 1])
 > 1.  torch.Size([16, 97, 512]) torch.float16
 > 2.  97 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 149, 512]) torch.float16
 > 2.  149 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([16, 84, 512]) torch.float16
 > 2.  84 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1088, 1]) torch.Size([1088, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 231, 512]) torch.float16
 > 2.  231 20 10 23
 > 6.  torch.Size([184, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([136, 14, 512]) torch.float16
 > 2.  14 20 10 1
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([2176, 1]) torch.Size([2176, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 162, 512]) torch.float16
 > 2.  162 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([24, 61, 512]) torch.float16
 > 2.  61 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 211, 512]) torch.float16
 > 2.  211 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 180, 512]) torch.float16
 > 2.  180 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([5, 372, 512]) torch.float16
 > 2.  372 20 10 37
 > 6.  torch.Size([185, 512]) torch.float16
 > 7.  torch.Size([875, 1]) torch.Size([875, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([693, 1]) torch.Size([693, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([8, 179, 512]) torch.float16
 > 2.  179 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([6, 271, 512]) torch.float16
 > 2.  271 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([678, 1]) torch.Size([678, 1])
 > 1.  torch.Size([56, 34, 512]) torch.float16
 > 2.  34 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.   > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 144, 512]) torch.float16
 > 2.  144 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([88, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1496, 1]) torch.Size([1496, 1])
 > 1.  torch.Size([7, 236, 512]) torch.float16
 > 2.  236 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([658, 1]) torch.Size([658, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 164, 512]) torch.float16
 > 2.  164 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([8, 200, 512]) torch.float16
 > 2.  200 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([8, 179, 512]) torch.float16
 > 2.  179 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 129, 512]) torch.float16
 > 2.  129 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([88, 21, 512]) torch.float16
 > 2.  21 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1672, 1]) torch.Size([1672, 1])
 > 1.  torch.Size([8, 130, 512]) torch.float16
 > 2.  130 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 129, 512]) torch.float16
 > 2.  129 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 199, 512]) torch.float16
 > 2.  199 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([808, 1]) torch.Size([808, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([424, 1]) torch.Size([424, 1])
 > 1.  torch.Size([8, 182, 512]) torch.float16
 > 2.  182 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1512, 1]) torch.Size([1512, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([8, 158, 512]) torch.float16
 > 2.  158 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([6, 297, 512]) torch.float16
 > 2.  297 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([774, 1]) torch.Size([774, 1])
 > 1.  torch.Size([56, 32, 512]) torch.float16
 > 2.  32 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([5, 332, 512]) torch.float16
 > 2.  332 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([690, 1]) torch.Size([690, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 143, 512]) torch.float16
 > 2.  143 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([8, 151, 512]) torch.float16
 > 2.  151 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([24, 64, 512]) torch.float16
 > 2.  64 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([6, 280, 512]) torch.float16
 > 2.  280 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([714, 1]) torch.Size([714, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([24, 60, 512]) torch.float16
 > 2.  60 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([792, 1]) torch.Size([792, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 74, 512]) torch.float16
 > 2.  74 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10  > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([7, 236, 512]) torch.float16
 > 2.  236 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([7, 257, 512]) torch.float16
 > 2.  257 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([5, 315, 512]) torch.float16
 > 2.  315 20 10 31
 > 6.  torch.Size([155, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([8, 153, 512]) torch.float16
 > 2.  153 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([32, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([8, 202, 512]) torch.float16
 > 2.  202 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([8, 202, 512]) torch.float16
 > 2.  202 20 10 20
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([16, 105, 512]) torch.float16
 > 2.  105 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([32, 57, 512]) torch.float16
 > 2.  57 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 155, 512]) torch.float16
 > 2.  155 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1120, 1]) torch.Size([1120, 1])
 > 1.  torch.Size([6, 277, 512]) torch.float16
 > 2.  277 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([750, 1]) torch.Size([750, 1])
 > 1.  torch.Size([8, 176, 512]) torch.float16
 > 2.  176 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([16, 97, 512]) torch.float16
 > 2.  97 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 114, 512]) torch.float16
 > 2.  114 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([16, 88, 512]) torch.float16
 > 2.  88 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 137, 512]) torch.float16
 > 2.  137 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([56, 32, 512]) torch.float16
 > 2.  32 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1512, 1]) torch.Size([1512, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1232, 1]) torch.Size([1232, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([88, 21, 512]) torch.float16
 > 2.  21 20 10 2
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1496, 1]) torch.Size([1496, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([8, 156, 512]) torch.float16
 > 2.  156 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([80, 22, 512]) torch.float16
 > 2.  22 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([16, 79, 512]) torch.float16
 > 2.  79 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([16, 84, 512]) torch.float16
 > 2.  84 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 145, 512]) torch.float16
 > 2.  145 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([6, 285, 512]) torch.float16
 > 2.  285 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([702, 1]) torch.Size([702, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([5, 349, 512]) torch.float16
 > 2.  349 20 10 34
 > 6.  torch.Size([170, 512]) torch.float16
 > 7.  torch.Size([730, 1]) torch.Size([730, 1])
 > 1.  torch.Size([8, 153, 512]) torch.float16
 > 2.   > 1.  torch.Size([6, 280, 512]) torch.float16
 > 2.  280 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([708, 1]) torch.Size([708, 1])
 > 1.  torch.Size([64, 28, 512]) torch.float16
 > 2.  28 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1536, 1]) torch.Size([1536, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([48, 35, 512]) torch.float16
 > 2.  35 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([8, 156, 512]) torch.float16
 > 2.  156 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([544, 1]) torch.Size([544, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([8, 163, 512]) torch.float16
 > 2.  163 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([24, 76, 512]) torch.float16
 > 2.  76 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([8, 150, 512]) torch.float16
 > 2.  150 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([8, 160, 512]) torch.float16
 > 2.  160 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([6, 276, 512]) torch.float16
 > 2.  276 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([678, 1]) torch.Size([678, 1])
 > 1.  torch.Size([8, 128, 512]) torch.float16
 > 2.  128 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([8, 166, 512]) torch.float16
 > 2.  166 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1016, 1]) torch.Size([1016, 1])
 > 1.  torch.Size([72, 26, 512]) torch.float16
 > 2.  26 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([8, 230, 512]) torch.float16
 > 2.  230 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([808, 1]) torch.Size([808, 1])
 > 1.  torch.Size([16, 107, 512]) torch.float16
 > 2.  107 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([32, 48, 512]) torch.float16
 > 2.  48 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([8, 120, 512]) torch.float16
 > 2.  120 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([80, 23, 512]) torch.float16
 > 2.  23 20 10 2
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([24, 66, 512]) torch.float16
 > 2.  66 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([7, 241, 512]) torch.float16
 > 2.  241 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([805, 1]) torch.Size([805, 1])
 > 1.  torch.Size([8, 140, 512]) torch.float16
 > 2.  140 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 80, 512]) torch.float16
 > 2.  80 20 10 7
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([984, 1]) torch.Size([984, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([6, 303, 512]) torch.float16
 > 2.  303 20 10 30
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([852, 1]) torch.Size([852, 1])
 > 1.  torch.Size([8, 212, 512]) torch.float16
 > 2.  212 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([32, 49, 512]) torch.float16
 > 2.  49 20 10 4
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([16, 86, 512]) torch.float16
 > 2.  86 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([752, 1]) torch.Size([752, 1])
 > 1.  torch.Size([16, 81, 512]) torch.float16
 > 2.  81 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([880, 1]) torch.Size([880, 1])
 > 1.  torch.Size([96, 20, 512]) torch.float16
 > 2.  20 20 10 1
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([1824, 1]) torch.Size([1824, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([5, 322, 512]) torch.float16
 > 2.  322 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([690, 1]) torch.Size([690, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([536, 1]) torch.Size([536, 1])
 > 1.  torch.Size([8, 123, 512]) torch.float16
 > 2.  123 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 165, 512]) torch.float16
 > 2.  165 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([6, 277, 512]) torch.float16
 > 2.  277 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1104, 1]) torch.Size([1104, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([448, 1]) torch.Size([448, 1])
 > 1.  torch.Size([48, 37, 512]) torch.float16
 > 2.  37 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1248, 1]) torch.Size([1248, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([8, 142, 512]) torch.float16
 > 2.  142 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([560, 1]) torch.Size([560, 1])
 > 1.  torch.Size([16, 107, 512]) torch.float16
 > 2.  107 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 115, 512]) torch.float16
 > 2.  115 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([56, 30, 512]) torch.float16
 > 2.  30 20 10 2
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([1344, 1]) torch.Size([1344, 1])
 > 1.  torch.Size([32, 51, 512]) torch.float16
 > 2.  51 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([6, 294, 512]) torch.float16
 > 2.  294 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([732, 1]) torch.Size([732, 1])
 > 1.  torch.Size([8, 146, 512]) torch.float16
 > 2.  146 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([88, 20, 512]) torch.float16
 > 2.  20 20 10 1
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([24, 77, 512]) torch.float16
 > 2.  77 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([48, 36, 512]) torch.float16
 > 2.  36 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1200, 1]) torch.Size([1200, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([576, 1]) torch.Size([576, 1])
 > 1.  torch.Size([16, 92, 512]) torch.float16
 > 2.  92 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([5, 350, 512]) torch.float16
 > 2.  350 20 10 34
 > 6.  torch.Size([170, 512]) torch.float16
 > 7.  torch.Size([770, 1]) torch.Size([770, 1])
 > 1.  torch.Size([32, 55, 512]) torch.float16
 > 2.  55 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([992, 1]) torch.Size([992, 1])
 > 1.  torch.Size([6, 295, 512]) torch.float16
 > 2.  295 20 10 29
 > 6.  torch.Size([174, 512]) torch.float16
 > 7.  torch.Size([822, 1]) torch.Size([822, 1])
 > 1.  torch.Size([8, 180, 512]) torch.float16
 > 2.  180 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([648, 1]) torch.Size([648, 1])
 > 1.  torch.Size([6, 272, 512]) torch.float16
 > 2.  272 20 10 27
 > 6.  torch.Size([162, 512]) torch.float16
 > 7.  torch.Size([708, 1]) torch.Size([708, 1])
 > 1.  torch.Size([8, 198, 512]) torch.float16
 > 2.  198 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([96, 20, 512]) torch.float16
 > 2.  20 20 10 1
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([1632, 1]) torch.Size([1632, 1])
 > 1.  torch.Size([8, 161, 512]) torch.float16
 > 2.  161 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([624, 1]) torch.Size([624, 1])
 > 1.  torch.Size([72, 24, 512]) torch.float16
 > 2.  24 20 10 2
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([24, 72, 512]) torch.float16
 > 2.  72 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([5, 362, 512]) torch.float16
 > 2.  362 20 10 36
 > 6.  torch.Size([180, 512]) torch.float16
 > 7.  torch.Size([785, 1]) torch.Size([785, 1])
 > 1.  torch.Size([8, 134, 512]) torch.float16
 > 2.  134 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1080, 1]) torch.Size([1080, 1])
 > 1.  torch.Size([6, 289, 512]) torch.float16
 > 2.  289 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([828, 1]) torch.Size([828, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([32, 52, 512]) torch.float16
 > 2.  52 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([16, 90, 512]) torch.float16
 > 2.  90 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([16, 95, 512]) torch.float16
 > 2.  95 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 190, 512]) torch.float16
 > 2.  190 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([696, 1]) torch.Size([696, 1])
 > 1.  torch.Size([8, 119, 512]) torch.float16
 > 2.  119 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 186, 512]) torch.float16
 > 2.  186 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([440, 1]) torch.Size([440, 1])
 > 1.  torch.Size([5, 339, 512]) torch.float16
 > 2.  339 20 10 33
 > 6.  torch.Size([165, 512]) torch.float16
 > 7.  torch.Size([695, 1]) torch.Size([695, 1])
 > 1.  torch.Size([120, 16, 512]) torch.float16
 > 2.  16 20 10 1
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1920, 1]) torch.Size([1920, 1])
 > 1.  torch.Size([104, 18, 512]) torch.float16
 > 2.  18 20 10 1
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([3640, 1]) torch.Size([3640, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([40, 41, 512]) torch.float16
 > 2.  41 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1280, 1]) torch.Size([1280, 1])
 > 1.  torch.Size([8, 174, 512]) torch.float16
 > 2.  174 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 203, 512]) torch.float16
 > 1.  torch.Size([8, 200, 512]) torch.float16
 > 2.  200 20 10 19
 > 6.  torch.Size([152, 512]) torch.float16
 > 7.  torch.Size([680, 1]) torch.Size([680, 1])
 > 1.  torch.Size([8, 175, 512]) torch.float16
 > 2.  175 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([7, 267, 512]) torch.float16
 > 2.  267 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16
 > 7.  torch.Size([903, 1]) torch.Size([903, 1])
 > 1.  torch.Size([56, 33, 512]) torch.float16
 > 2.  33 20 10 3
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1456, 1]) torch.Size([1456, 1])
 > 1.  torch.Size([16, 100, 512]) torch.float16
 > 2.  100 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([728, 1]) torch.Size([728, 1])
 > 1.  torch.Size([7, 251, 512]) torch.float16
 > 2.  251 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([735, 1]) torch.Size([735, 1])
 > 1.  torch.Size([24, 68, 512]) torch.float16
 > 2.  68 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 159, 512]) torch.float16
 > 2.  159 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([472, 1]) torch.Size([472, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([16, 98, 512]) torch.float16
 > 2.  98 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([8, 180, 512]) torch.float16
 > 2.  180 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([64, 29, 512]) torch.float16
 > 2.  29 20 10 2
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([1408, 1]) torch.Size([1408, 1])
 > 1.  torch.Size([16, 107, 512]) torch.float16
 > 2.  107 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([6, 289, 512]) torch.float16
 > 2.  289 20 10 28
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([744, 1]) torch.Size([744, 1])
 > 1.  torch.Size([48, 39, 512]) torch.float16
 > 2.  39 20 10 3
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1392, 1]) torch.Size([1392, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([16, 89, 512]) torch.float16
 > 2.  89 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([7, 238, 512]) torch.float16
 > 2.  238 20 10 23
 > 6.  torch.Size([161, 512]) torch.float16
 > 7.  torch.Size([742, 1]) torch.Size([742, 1])
 > 1.  torch.Size([8, 148, 512]) torch.float16
 > 2.  148 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([512, 1]) torch.Size([512, 1])
 > 1.  torch.Size([16, 99, 512]) torch.float16
 > 2.  99 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([40, 45, 512]) torch.float16
 > 2.  45 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1440, 1]) torch.Size([1440, 1])
 > 1.  torch.Size([8, 184, 512]) torch.float16
 > 2.  184 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([760, 1]) torch.Size([760, 1])
 > 1.  torch.Size([16, 101, 512]) torch.float16
 > 2.  101 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([976, 1]) torch.Size([976, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([8, 173, 512]) torch.float16
 > 2.  173 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([8, 157, 512]) torch.float16
 > 2.  157 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([24, 71, 512]) torch.float16
 > 2.  71 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([32, 53, 512]) torch.float16
 > 2.  53 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1056, 1]) torch.Size([1056, 1])
 > 1.  torch.Size([7, 244, 512]) torch.float16
 > 2.  244 20 10 24
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([798, 1]) torch.Size([798, 1])
 > 1.  torch.Size([8, 178, 512]) torch.float16
 > 2.  178 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([8, 125, 512]) torch.float16
 > 2.  125 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1584, 1]) torch.Size([1584, 1])
 > 1.  torch.Size([16, 96, 512]) torch.float16
 > 2.  96 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([5, 330, 512]) torch.float16
 > 2.  330 20 10 32
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([740, 1]) torch.Size([740, 1])
 > 1.  torch.Size([8, 141, 512]) torch.float16
 > 2.  141 20 10 14
 > 6.  torch.Size([112, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 138, 512]) torch.float16
 > 2.  138 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([672, 1]) torch.Size([672, 1])
 > 1.  torch.Size([5, 316, 512]) torch.float16
 > 2.  316 20 10 31
 > 6.  torch.Size([155, 512]) torch.float16
 > 7.  torch.Size([670, 1]) torch.Size([670, 1])
 > 1.  torch.Size([7, 260, 512]) torch.float16
 > 2.  260 20 10 25
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 184, 512]) torch.float16
 > 2.  184 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 105, 512]) torch.float16
 > 2.  105 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 226, 512]) torch.float16
 > 2.  226 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([16, 117, 512]) torch.float16
 > 2.  117 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 1.  torch.Size([16, 94, 512]) torch.float16
 > 2.  94 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([800, 1]) torch.Size([800, 1])
 > 1.  torch.Size([40, 44, 512]) torch.float16
 > 2.  44 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 131, 512]) torch.float16
 > 2.  131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([584, 1]) torch.Size([584, 1])
 > 1.  torch.Size([32, 58, 512]) torch.float16
 > 2.  58 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([960, 1]) torch.Size([960, 1])
 > 1.  torch.Size([16, 113, 512]) torch.float16
 > 2.  113 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([864, 1]) torch.Size([864, 1])
 > 1.  torch.Size([8, 130, 512]) torch.float16
 > 2.  130 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([568, 1]) torch.Size([568, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([24, 69, 512]) torch.float16
 > 2.  69 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1032, 1]) torch.Size([1032, 1])
 > 1.  torch.Size([24, 67, 512]) torch.float16
 > 2.  67 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([1416, 1]) torch.Size([1416, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1160, 1]) torch.Size([1160, 1])
 > 1.  torch.Size([16, 83, 512]) torch.float16
 > 2.  83 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([720, 1]) torch.Size([720, 1])
 > 1.  torch.Size([8, 121, 512]) torch.float16
 > 2.  121 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([8, 186, 512]) torch.float16
 > 2.  186 20 10 18
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([664, 1]) torch.Size([664, 1])
 > 1.  torch.Size([7, 262, 512]) torch.float16
 > 2.  262 20 10 26
 > 6.  torch.Size([182, 512]) torch.float16
 > 7.  torch.Size([805, 1]) torch.Size([805, 1])
 > 1.  torch.Size([40, 46, 512]) torch.float16
 > 2.  46 20 10 4
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1240, 1]) torch.Size([1240, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([552, 1]) torch.Size([552, 1])
 > 1.  torch.Size([8, 221, 512]) torch.float16
 > 2.  221 20 10 22
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([16, 102, 512]) torch.float16
 > 2.  102 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([24, 62, 512]) torch.float16
 > 2.  62 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([936, 1]) torch.Size([936, 1])
 > 1.  torch.Size([5, 355, 512]) torch.float16
 > 2.  355 20 10 35
 > 6.  torch.Size([175, 512]) torch.float16
 > 7.  torch.Size([835, 1]) torch.Size([835, 1])
 > 1.  torch.Size([16, 85, 512]) torch.float16
 > 2.  85 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([736, 1]) torch.Size([736, 1])
 > 1.  torch.Size([16, 82, 512]) torch.float16
 > 2.  82 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([704, 1]) torch.Size([704, 1])
 > 1.  torch.Size([16, 104, 512]) torch.float16
 > 2.  104 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([8, 172, 512]) torch.float16
 > 2.  172 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([632, 1]) torch.Size([632, 1])
 > 1.  torch.Size([16, 112, 512]) torch.float16
 > 2.  112 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([896, 1]) torch.Size([896, 1])
 > 1.  torch.Size([16, 110, 512]) torch.float16
 > 2.  110 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([848, 1]) torch.Size([848, 1])
 > 1.  torch.Size([16, 111, 512]) torch.float16
 > 2.  111 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([944, 1]) torch.Size([944, 1])
 > 1.  torch.Size([8, 122, 512]) torch.float16
 > 2.  122 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([456, 1]) torch.Size([456, 1])
 > 1.  torch.Size([16, 114, 512]) torch.float16
 > 2.  114 20 10 11
 > 6.  torch.Size([176, 512]) torch.float16
 > 7.  torch.Size([1008, 1]) torch.Size([1008, 1])
 > 1.  torch.Size([8, 132, 512]) torch.float16
 > 2.  132 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([464, 1]) torch.Size([464, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 135, 512]) torch.float16
 > 2.  135 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([496, 1]) torch.Size([496, 1])
 > 1.  torch.Size([40, 40, 512]) torch.float16
 > 2.  40 20 10 3
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([1040, 1]) torch.Size([1040, 1])
 > 1.  torch.Size([8, 124, 512]) torch.float16
 > 2.  124 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([488, 1]) torch.Size([488, 1])
 > 1.  torch.Size([8, 118, 512]) torch.float16
 > 2.  118 20 10 11
 > 6.  torch.Size([88, 512]) torch.float16
 > 7.  torch.Size([416, 1]) torch.Size([416, 1])
 > 1.  torch.Size([8, 136, 512]) torch.float16
 > 2.  136 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([480, 1]) torch.Size([480, 1])
 > 1.  torch.Size([8, 154, 512]) torch.float16
 > 2.  154 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([24, 70, 512]) torch.float16
 > 2.  70 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([1176, 1]) torch.Size([1176, 1])
 > 1.  torch.Size([8, 169, 512]) torch.float16
 > 2.  169 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
 > 1.  torch.Size([16, 93, 512]) torch.float16
 > 2.  93 20 10 9
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([16, 103, 512]) torch.float16
 > 2.  103 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([784, 1]) torch.Size([784, 1])
 > 1.  torch.Size([8, 168, 512]) torch.float16
 > 2.  168 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([656, 1]) torch.Size([656, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1024, 1]) torch.Size([1024, 1])
 > 1.  torch.Size([8, 211, 512]) torch.float16
 > 2.  211 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([832, 1]) torch.Size([832, 1])
 > 1.  torch.Size([8, 214, 512]) torch.float16
 > 2.  214 20 10 21
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([688, 1]) torch.Size([688, 1])
 > 1.  torch.Size([16, 109, 512]) torch.float16
 > 2.  109 20 10 10
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1152, 1]) torch.Size([1152, 1])
 > 1.  torch.Size([24, 63, 512]) torch.float16
 > 2.  63 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([816, 1]) torch.Size([816, 1])
 > 1.  torch.Size([8, 126, 512]) torch.float16
 > 2.  126 20 10 12
 > 6.  torch.Size([96, 512]) torch.float16
 > 7.  torch.Size([504, 1]) torch.Size([504, 1])
 > 1.  torch.Size([8, 203, 512]) 131 20 10 13
 > 6.  torch.Size([104, 512]) torch.float16
 > 7.  torch.Size([520, 1]) torch.Size([520, 1])
 > 1.  torch.Size([8, 163, 512]) torch.float16
 > 2.  163 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([616, 1]) torch.Size([616, 1])
 > 1.  torch.Size([24, 65, 512]) torch.float16
 > 2.  65 20 10 6
 > 6.  torch.Size([144, 512]) torch.float16
 > 7.  torch.Size([912, 1]) torch.Size([912, 1])
 > 1.  torch.Size([8, 171, 512]) torch.float16
 > 2.  171 20 10 17
 > 6.  torch.Size([136, 512]) torch.float16
 > 7.  torch.Size([600, 1]) torch.Size([600, 1])
 > 1.  torch.Size([16, 86, 512]) torch.float16
 > 2.  86 20 10 8
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([768, 1]) torch.Size([768, 1])
 > 1.  torch.Size([24, 75, 512]) torch.float16
 > 2.  75 20 10 7
 > 6.  torch.Size([168, 512]) torch.float16
 > 7.  torch.Size([888, 1]) torch.Size([888, 1])
 > 1.  torch.Size([32, 56, 512]) torch.float16
 > 2.  56 20 10 5
 > 6.  torch.Size([160, 512]) torch.float16
 > 7.  torch.Size([1184, 1]) torch.Size([1184, 1])
 > 1.  torch.Size([24, 59, 512]) torch.float16
 > 2.  59 20 10 5
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([840, 1]) torch.Size([840, 1])
 > 1.  torch.Size([8, 163, 512]) torch.float16
 > 2.  163 20 10 16
 > 6.  torch.Size([128, 512]) torch.float16
 > 7.  torch.Size([608, 1]) torch.Size([608, 1])
 > 1.  torch.Size([8, 155, 512]) torch.float16
 > 2.  155 20 10 15
 > 6.  torch.Size([120, 512]) torch.float16
 > 7.  torch.Size([592, 1]) torch.Size([592, 1])
2023-07-11 11:58:53 | WARNING | fairseq.trainer | OOM: Ran out of memory with exception: CUDA out of memory. Tried to allocate 72.00 MiB (GPU 6; 23.69 GiB total capacity; 8.22 GiB already allocated; 30.06 MiB free; 8.34 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 0                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Active memory         |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Requested memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| GPU reserved memory   |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Non-releasable memory |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Allocations           |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Active allocs         |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| GPU reserved segments |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 1                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Active memory         |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Requested memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| GPU reserved memory   |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Non-releasable memory |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Allocations           |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Active allocs         |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| GPU reserved segments |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 2                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Active memory         |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Requested memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| GPU reserved memory   |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Non-releasable memory |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Allocations           |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Active allocs         |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| GPU reserved segments |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 3                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Active memory         |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Requested memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| GPU reserved memory   |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Non-releasable memory |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Allocations           |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Active allocs         |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| GPU reserved segments |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 4                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Active memory         |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Requested memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| GPU reserved memory   |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Non-releasable memory |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Allocations           |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Active allocs         |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| GPU reserved segments |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 5                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Active memory         |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Requested memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| GPU reserved memory   |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Non-releasable memory |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Allocations           |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Active allocs         |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| GPU reserved segments |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 6                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 1            |        cudaMalloc retries: 3         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |   8345 MiB |   8417 MiB |   4836 GiB |   4828 GiB |
|       from large pool |   8279 MiB |   8351 MiB |   4718 GiB |   4710 GiB |
|       from small pool |     66 MiB |    129 MiB |    117 GiB |    117 GiB |
|---------------------------------------------------------------------------|
| Active memory         |   8345 MiB |   8417 MiB |   4836 GiB |   4828 GiB |
|       from large pool |   8279 MiB |   8351 MiB |   4718 GiB |   4710 GiB |
|       from small pool |     66 MiB |    129 MiB |    117 GiB |    117 GiB |
|---------------------------------------------------------------------------|
| Requested memory      |   8331 MiB |   8403 MiB |   4817 GiB |   4809 GiB |
|       from large pool |   8265 MiB |   8337 MiB |   4699 GiB |   4691 GiB |
|       from small pool |     66 MiB |    129 MiB |    117 GiB |    117 GiB |
|---------------------------------------------------------------------------|
| GPU reserved memory   |   8542 MiB |   8542 MiB |  32216 MiB |  23674 MiB |
|       from large pool |   8454 MiB |   8454 MiB |  31654 MiB |  23200 MiB |
|       from small pool |     88 MiB |    274 MiB |    562 MiB |    474 MiB |
|---------------------------------------------------------------------------|
| Non-releasable memory | 127879 KiB |   2486 MiB |   4609 GiB |   4609 GiB |
|       from large pool | 105466 KiB |   2445 MiB |   4484 GiB |   4484 GiB |
|       from small pool |  22413 KiB |     52 MiB |    124 GiB |    124 GiB |
|---------------------------------------------------------------------------|
| Allocations           |     817    |    1031    |  650407    |  649590    |
|       from large pool |     304    |     305    |  258624    |  258320    |
|       from small pool |     513    |     858    |  391783    |  391270    |
|---------------------------------------------------------------------------|
| Active allocs         |     817    |    1031    |  650407    |  649590    |
|       from large pool |     304    |     305    |  258624    |  258320    |
|       from small pool |     513    |     858    |  391783    |  391270    |
|---------------------------------------------------------------------------|
| GPU reserved segments |      84    |     173    |     440    |     356    |
|       from large pool |      40    |      40    |     159    |     119    |
|       from small pool |      44    |     137    |     281    |     237    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |      51    |     112    |  355691    |  355640    |
|       from large pool |      29    |      30    |  157029    |  157000    |
|       from small pool |      22    |      98    |  198662    |  198640    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

2023-07-11 11:58:53 | WARNING | fairseq.trainer | |===========================================================================|
|                  PyTorch CUDA memory summary, device ID 7                 |
|---------------------------------------------------------------------------|
|            CUDA OOMs: 0            |        cudaMalloc retries: 0         |
|===========================================================================|
|        Metric         | Cur Usage  | Peak Usage | Tot Alloc  | Tot Freed  |
|---------------------------------------------------------------------------|
| Allocated memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Active memory         |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Requested memory      |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| GPU reserved memory   |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Non-releasable memory |      0 B   |      0 B   |      0 B   |      0 B   |
|       from large pool |      0 B   |      0 B   |      0 B   |      0 B   |
|       from small pool |      0 B   |      0 B   |      0 B   |      0 B   |
|---------------------------------------------------------------------------|
| Allocations           |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Active allocs         |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| GPU reserved segments |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Non-releasable allocs |       0    |       0    |       0    |       0    |
|       from large pool |       0    |       0    |       0    |       0    |
|       from small pool |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize allocations  |       0    |       0    |       0    |       0    |
|---------------------------------------------------------------------------|
| Oversize GPU segments |       0    |       0    |       0    |       0    |
|===========================================================================|

/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:4999: UserWarning: Support for mismatched key_padding_mask and attn_mask is deprecated. Use same type for both instead.
  warnings.warn(
2023-07-11 11:58:53 | WARNING | fairseq.trainer | attempting to recover from OOM in forward/backward pass
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 3): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 5): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 0): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 4): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 6): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 7): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 1): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | fairseq.distributed.utils | distributed init (rank 2): tcp://localhost:14457
2023-07-11 12:03:15 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 7
2023-07-11 12:03:15 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 6
2023-07-11 12:03:15 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 4
2023-07-11 12:03:15 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 1
2023-07-11 12:03:15 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 2
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 3
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 0
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 5
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 6: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 7: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 5: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 5
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 7
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 2
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 6
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 1
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 0
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 3
2023-07-11 12:03:16 | INFO | torch.distributed.distributed_c10d | Rank 4: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:16 | INFO | fairseq.distributed.utils | initialized host capios as rank 4
2023-07-11 12:03:18 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': True, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': True, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 8, 'distributed_num_procs': 8, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': 'tcp://localhost:14457', 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'no_c10d', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 8, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': True, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 2, 'skip_invalid_size_inputs_valid_test': True, 'max_tokens': 15000, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train_st,train_asr,train_mt', 'valid_subset': 'dev_st', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 15000, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 100, 'max_update': 60000, 'stop_time_hours': 0.0, 'clip_norm': 10.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.0002], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 2000, 'keep_interval_updates': 5, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': 2, 'keep_best_checkpoints': 10, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'bleu', 'maximize_best_checkpoint_metric': True, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 8}, 'generation': {'_name': None, 'beam': 5, 'beam_mt': 0, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'max_len_a_mt': 0.0, 'max_len_b_mt': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'lenpen_mt': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='s2t_joint', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'task': Namespace(_name='joint_triple_pretraining', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'criterion': Namespace(_name='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9,0.98)', 'adam_eps': 1e-08, 'weight_decay': 0.0, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [0.0002]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 5000, 'warmup_init_lr': 1e-07, 'lr': [0.0002]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'simul_type': None}
2023-07-11 12:03:18 | INFO | fairseq.tasks.joint_triple_pretraining | dictionary size (dict.wrd.txt): 10,000
2023-07-11 12:03:18 | INFO | fairseq.tasks.joint_triple_pretraining | asr dictionary size (dict.wrd.txt): 10,000
2023-07-11 12:03:18 | INFO | fairseq.tasks.joint_triple_pretraining | cluster dictionary size (kmeans100.convert.txt): 5,224
2023-07-11 12:03:18 | INFO | fairseq.tasks.joint_triple_pretraining | Initial task weight: asr 1.0: mt 1.0
2023-07-11 12:03:18 | INFO | root | load pretrained embeddings: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 12:03:23 | INFO | fairseq.tasks.hubert_pretraining | current directory is /workspace/fairseq-AT/egs/pretrain-all
2023-07-11 12:03:23 | INFO | fairseq.tasks.hubert_pretraining | HubertPretrainingTask Config {'_name': 'hubert_pretraining', 'data': 'data_all_ende_lcrm', 'fine_tuning': False, 'labels': ['layer6.km500'], 'label_dir': None, 'label_rate': 50.0, 'sample_rate': 16000, 'normalize': False, 'enable_padding': False, 'max_keep_size': None, 'max_sample_size': 250000, 'min_sample_size': 32000, 'single_target': False, 'random_crop': True, 'pad_audio': False}
2023-07-11 12:03:23 | INFO | fairseq.models.hubert.hubert | HubertModel Config: {'_name': 'hubert', 'label_rate': 50.0, 'extractor_mode': default, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': gelu, 'layer_type': transformer, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.1, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.1, 'final_dim': 256, 'untie_final_proj': False, 'layer_norm_first': False, 'conv_feature_layers': '[(512,10,5)] + [(512,3,2)] * 4 + [(512,2,2)] * 2', 'conv_bias': False, 'logit_temp': 0.1, 'target_glu': False, 'feature_grad_mult': 0.0, 'mask_length': 10, 'mask_prob': 0.5, 'mask_selection': static, 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'mask_channel_length': 6, 'mask_channel_prob': 0.25, 'mask_channel_selection': static, 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'conv_pos': 128, 'conv_pos_groups': 16, 'latent_temp': [2.0, 0.5, 0.999995], 'skip_masked': False, 'skip_nomask': False, 'checkpoint_activations': False, 'required_seq_len_multiple': 2, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': True}
2023-07-11 12:03:26 | INFO | root | load pretrained hubert
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 2): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 0): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 3): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 1): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 5): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 7): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 6): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 7
2023-07-11 12:03:45 | INFO | fairseq.distributed.utils | distributed init (rank 4): tcp://localhost:14145
2023-07-11 12:03:45 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 3
2023-07-11 12:03:45 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 5
2023-07-11 12:03:45 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 6
2023-07-11 12:03:45 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 1
2023-07-11 12:03:45 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 4
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 0
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 2
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 7: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 2
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 3
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 7
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 0
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 5: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 6: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | torch.distributed.distributed_c10d | Rank 4: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 5
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 6
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 4
2023-07-11 12:03:46 | INFO | fairseq.distributed.utils | initialized host capios as rank 1
2023-07-11 12:03:48 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': True, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': True, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 8, 'distributed_num_procs': 8, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': 'tcp://localhost:14145', 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'no_c10d', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 8, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': True, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 2, 'skip_invalid_size_inputs_valid_test': True, 'max_tokens': 15000, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train_st,train_asr,train_mt', 'valid_subset': 'dev_st', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 15000, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 100, 'max_update': 60000, 'stop_time_hours': 0.0, 'clip_norm': 10.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.0002], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 2000, 'keep_interval_updates': 5, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': 2, 'keep_best_checkpoints': 10, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'bleu', 'maximize_best_checkpoint_metric': True, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 8}, 'generation': {'_name': None, 'beam': 5, 'beam_mt': 0, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'max_len_a_mt': 0.0, 'max_len_b_mt': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'lenpen_mt': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='s2t_joint', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'task': Namespace(_name='joint_triple_pretraining', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'criterion': Namespace(_name='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9,0.98)', 'adam_eps': 1e-08, 'weight_decay': 0.0, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [0.0002]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 5000, 'warmup_init_lr': 1e-07, 'lr': [0.0002]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'simul_type': None}
2023-07-11 12:03:48 | INFO | fairseq.tasks.joint_triple_pretraining | dictionary size (dict.wrd.txt): 10,000
2023-07-11 12:03:48 | INFO | fairseq.tasks.joint_triple_pretraining | asr dictionary size (dict.wrd.txt): 10,000
2023-07-11 12:03:48 | INFO | fairseq.tasks.joint_triple_pretraining | cluster dictionary size (kmeans100.convert.txt): 5,224
2023-07-11 12:03:48 | INFO | fairseq.tasks.joint_triple_pretraining | Initial task weight: asr 1.0: mt 1.0
2023-07-11 12:03:48 | INFO | root | load pretrained embeddings: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 12:03:53 | INFO | fairseq.tasks.hubert_pretraining | current directory is /workspace/fairseq-AT/egs/pretrain-all
2023-07-11 12:03:53 | INFO | fairseq.tasks.hubert_pretraining | HubertPretrainingTask Config {'_name': 'hubert_pretraining', 'data': 'data_all_ende_lcrm', 'fine_tuning': False, 'labels': ['layer6.km500'], 'label_dir': None, 'label_rate': 50.0, 'sample_rate': 16000, 'normalize': False, 'enable_padding': False, 'max_keep_size': None, 'max_sample_size': 250000, 'min_sample_size': 32000, 'single_target': False, 'random_crop': True, 'pad_audio': False}
2023-07-11 12:03:53 | INFO | fairseq.models.hubert.hubert | HubertModel Config: {'_name': 'hubert', 'label_rate': 50.0, 'extractor_mode': default, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': gelu, 'layer_type': transformer, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.1, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.1, 'final_dim': 256, 'untie_final_proj': False, 'layer_norm_first': False, 'conv_feature_layers': '[(512,10,5)] + [(512,3,2)] * 4 + [(512,2,2)] * 2', 'conv_bias': False, 'logit_temp': 0.1, 'target_glu': False, 'feature_grad_mult': 0.0, 'mask_length': 10, 'mask_prob': 0.5, 'mask_selection': static, 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'mask_channel_length': 6, 'mask_channel_prob': 0.25, 'mask_channel_selection': static, 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'conv_pos': 128, 'conv_pos_groups': 16, 'latent_temp': [2.0, 0.5, 0.999995], 'skip_masked': False, 'skip_nomask': False, 'checkpoint_activations': False, 'required_seq_len_multiple': 2, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': True}
2023-07-11 12:03:54 | INFO | root | load pretrained hubert
2023-07-11 12:03:55 | INFO | root | load pretrained embedding as ctc proj: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 12:03:58 | INFO | root | load pretrained encoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 12:03:59 | INFO | root | load pretrained decoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 12:03:59 | INFO | root | share the sematic adapter and textual encoder
2023-07-11 12:03:59 | INFO | fairseq_cli.train | S2TJoint(
  (acoustic_encoder): AcousticEncoder(
    (compress_ffn): Linear(in_features=768, out_features=512, bias=True)
    (proj): Linear(in_features=512, out_features=10000, bias=False)
    (w2v_model): HubertModel(
      (feature_extractor): ConvFeatureExtractionModel(
        (conv_layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(1, 512, kernel_size=(10,), stride=(5,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): Fp32GroupNorm(512, 512, eps=1e-05, affine=True)
            (3): GELU(approximate='none')
          )
          (1-4): 4 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(3,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
          (5-6): 2 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(2,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
        )
      )
      (post_extract_proj): Linear(in_features=512, out_features=768, bias=True)
      (dropout_input): Dropout(p=0.0, inplace=False)
      (dropout_features): Dropout(p=0.1, inplace=False)
      (encoder): TransformerEncoder(
        (pos_conv): Sequential(
          (0): Conv1d(768, 768, kernel_size=(128,), stride=(1,), padding=(64,), groups=16)
          (1): SamePad()
          (2): GELU(approximate='none')
        )
        (layers): ModuleList(
          (0-11): 12 x TransformerSentenceEncoderLayer(
            (self_attn): MultiheadAttention(
              (dropout_module): FairseqDropout()
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
        (layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      (final_proj): None
    )
    (noad): NormalAdapter(
      (subsample): Conv1dSubsampler(
        (conv_layers): ModuleList(
          (0): Conv1d(512, 512, kernel_size=(5,), stride=(2,), padding=(2,))
          (1): Conv1d(256, 1024, kernel_size=(5,), stride=(2,), padding=(2,))
        )
      )
      (layers): ModuleList()
    )
    (sead): SemanticAdapter(
      (embed_positions): SinusoidalPositionalEmbedding()
      (layers): ModuleList(
        (0-5): 6 x TransformerEncoderLayerBase(
          (self_attn): MultiheadAttention(
            (dropout_module): FairseqDropout()
            (k_proj): Linear(in_features=512, out_features=512, bias=True)
            (v_proj): Linear(in_features=512, out_features=512, bias=True)
            (q_proj): Linear(in_features=512, out_features=512, bias=True)
            (out_proj): Linear(in_features=512, out_features=512, bias=True)
          )
          (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (dropout_module): FairseqDropout()
          (activation_dropout_module): FairseqDropout()
          (fc1): Linear(in_features=512, out_features=1024, bias=True)
          (fc2): Linear(in_features=1024, out_features=512, bias=True)
          (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
    (final_dropout): Dropout(p=0.1, inplace=False)
    (shrink_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (textual_encoder): MTModelEncoder(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (decoder): TransformerDecoderScriptable(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (output_projection): Linear(in_features=512, out_features=10000, bias=False)
  )
  (task_net): TaskNetwork(
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (down_proj): Linear(in_features=512, out_features=256, bias=True)
    (up_proj): Linear(in_features=256, out_features=512, bias=True)
    (dropout_module): FairseqDropout()
    (task_proj): Linear(in_features=512, out_features=1, bias=False)
  )
)
2023-07-11 12:03:59 | INFO | fairseq_cli.train | task: JointTriplePretrainingTask
2023-07-11 12:03:59 | INFO | fairseq_cli.train | model: S2TJoint
2023-07-11 12:03:59 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropywithW2vCtcShrinkJointAT
2023-07-11 12:03:59 | INFO | fairseq_cli.train | num. shared model params: 134,449,280 (num. trained: 134,449,280)
2023-07-11 12:03:59 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
2023-07-11 12:03:59 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 12:03:59 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:03:59 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:03:59 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="dev_st", n_samples=1418, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:04:07 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:2 to store for rank: 0
2023-07-11 12:04:11 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:2 with 8 nodes.
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- textual_encoder.embed_tokens.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.embed_tokens.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.output_projection.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.0.0.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.1.0.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.2.0.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.3.0.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.4.0.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.5.0.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.6.0.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- decoder.output_projection.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- task_net.task_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.weight <- textual_encoder.layers.0.self_attn.k_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.bias <- textual_encoder.layers.0.self_attn.k_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.weight <- textual_encoder.layers.0.self_attn.v_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.bias <- textual_encoder.layers.0.self_attn.v_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.weight <- textual_encoder.layers.0.self_attn.q_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.bias <- textual_encoder.layers.0.self_attn.q_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.weight <- textual_encoder.layers.0.self_attn.out_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.bias <- textual_encoder.layers.0.self_attn.out_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.weight <- textual_encoder.layers.0.self_attn_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.bias <- textual_encoder.layers.0.self_attn_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.weight <- textual_encoder.layers.0.fc1.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.bias <- textual_encoder.layers.0.fc1.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.weight <- textual_encoder.layers.0.fc2.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.bias <- textual_encoder.layers.0.fc2.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.weight <- textual_encoder.layers.0.final_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.bias <- textual_encoder.layers.0.final_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.weight <- textual_encoder.layers.1.self_attn.k_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.bias <- textual_encoder.layers.1.self_attn.k_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.weight <- textual_encoder.layers.1.self_attn.v_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.bias <- textual_encoder.layers.1.self_attn.v_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.weight <- textual_encoder.layers.1.self_attn.q_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.bias <- textual_encoder.layers.1.self_attn.q_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.weight <- textual_encoder.layers.1.self_attn.out_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.bias <- textual_encoder.layers.1.self_attn.out_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.weight <- textual_encoder.layers.1.self_attn_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.bias <- textual_encoder.layers.1.self_attn_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.weight <- textual_encoder.layers.1.fc1.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.bias <- textual_encoder.layers.1.fc1.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.weight <- textual_encoder.layers.1.fc2.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.bias <- textual_encoder.layers.1.fc2.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.weight <- textual_encoder.layers.1.final_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.bias <- textual_encoder.layers.1.final_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.weight <- textual_encoder.layers.2.self_attn.k_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.bias <- textual_encoder.layers.2.self_attn.k_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.weight <- textual_encoder.layers.2.self_attn.v_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.bias <- textual_encoder.layers.2.self_attn.v_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.weight <- textual_encoder.layers.2.self_attn.q_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.bias <- textual_encoder.layers.2.self_attn.q_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.weight <- textual_encoder.layers.2.self_attn.out_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.bias <- textual_encoder.layers.2.self_attn.out_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.weight <- textual_encoder.layers.2.self_attn_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.bias <- textual_encoder.layers.2.self_attn_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.weight <- textual_encoder.layers.2.fc1.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.bias <- textual_encoder.layers.2.fc1.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.weight <- textual_encoder.layers.2.fc2.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.bias <- textual_encoder.layers.2.fc2.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.weight <- textual_encoder.layers.2.final_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.bias <- textual_encoder.layers.2.final_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.weight <- textual_encoder.layers.3.self_attn.k_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.bias <- textual_encoder.layers.3.self_attn.k_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.weight <- textual_encoder.layers.3.self_attn.v_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.bias <- textual_encoder.layers.3.self_attn.v_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.weight <- textual_encoder.layers.3.self_attn.q_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.bias <- textual_encoder.layers.3.self_attn.q_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.weight <- textual_encoder.layers.3.self_attn.out_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.bias <- textual_encoder.layers.3.self_attn.out_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.weight <- textual_encoder.layers.3.self_attn_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.bias <- textual_encoder.layers.3.self_attn_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.weight <- textual_encoder.layers.3.fc1.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.bias <- textual_encoder.layers.3.fc1.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.weight <- textual_encoder.layers.3.fc2.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.bias <- textual_encoder.layers.3.fc2.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.weight <- textual_encoder.layers.3.final_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.bias <- textual_encoder.layers.3.final_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.weight <- textual_encoder.layers.4.self_attn.k_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.bias <- textual_encoder.layers.4.self_attn.k_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.weight <- textual_encoder.layers.4.self_attn.v_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.bias <- textual_encoder.layers.4.self_attn.v_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.weight <- textual_encoder.layers.4.self_attn.q_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.bias <- textual_encoder.layers.4.self_attn.q_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.weight <- textual_encoder.layers.4.self_attn.out_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.bias <- textual_encoder.layers.4.self_attn.out_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.weight <- textual_encoder.layers.4.self_attn_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.bias <- textual_encoder.layers.4.self_attn_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.weight <- textual_encoder.layers.4.fc1.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.bias <- textual_encoder.layers.4.fc1.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.weight <- textual_encoder.layers.4.fc2.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.bias <- textual_encoder.layers.4.fc2.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.weight <- textual_encoder.layers.4.final_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.bias <- textual_encoder.layers.4.final_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.weight <- textual_encoder.layers.5.self_attn.k_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.bias <- textual_encoder.layers.5.self_attn.k_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.weight <- textual_encoder.layers.5.self_attn.v_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.bias <- textual_encoder.layers.5.self_attn.v_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.weight <- textual_encoder.layers.5.self_attn.q_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.bias <- textual_encoder.layers.5.self_attn.q_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.weight <- textual_encoder.layers.5.self_attn.out_proj.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.bias <- textual_encoder.layers.5.self_attn.out_proj.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.weight <- textual_encoder.layers.5.self_attn_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.bias <- textual_encoder.layers.5.self_attn_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.weight <- textual_encoder.layers.5.fc1.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.bias <- textual_encoder.layers.5.fc1.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.weight <- textual_encoder.layers.5.fc2.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.bias <- textual_encoder.layers.5.fc2.bias
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.weight <- textual_encoder.layers.5.final_layer_norm.weight
2023-07-11 12:04:11 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.bias <- textual_encoder.layers.5.final_layer_norm.bias
2023-07-11 12:04:11 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   0: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   1: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   2: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   3: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   4: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   5: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   6: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | rank   7: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:04:11 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 12:04:11 | INFO | fairseq_cli.train | training on 8 devices (GPUs/TPUs)
2023-07-11 12:04:11 | INFO | fairseq_cli.train | max tokens per device = 15000 and max sentences per device = None
2023-07-11 12:04:11 | INFO | fairseq.trainer | Preparing to load checkpoint ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 12:04:11 | INFO | fairseq.trainer | No existing checkpoint found ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 12:04:11 | INFO | fairseq.trainer | loading train data for epoch 1
2023-07-11 12:04:11 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 12:04:11 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:04:11 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:04:13 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_mt", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:04:15 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_asr", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:04:17 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_st", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:05:21 | INFO | fairseq.data.iterators | grouped total_num_itrs = 1474
2023-07-11 12:05:21 | INFO | fairseq.trainer | begin training epoch 1
2023-07-11 12:05:21 | INFO | fairseq_cli.train | Start iterating over samples
2023-07-11 12:05:30 | INFO | fairseq.trainer | Saving checkpoint to /workspace/fairseq-AT/egs/pretrain-all/checkpoints/mustc/st/ende_shrink_AT_window_check/crash.pt
2023-07-11 12:05:31 | INFO | fairseq.trainer | Finished saving checkpoint to /workspace/fairseq-AT/egs/pretrain-all/checkpoints/mustc/st/ende_shrink_AT_window_check/crash.pt
Traceback (most recent call last):
  File "/workspace/fairseq-AT/fairseq_cli/train.py", line 564, in <module>
    cli_main()
  File "/workspace/fairseq-AT/fairseq_cli/train.py", line 557, in cli_main
    distributed_utils.call_main(cfg, main)
  File "/workspace/fairseq-AT/fairseq/distributed/utils.py", line 344, in call_main
    torch.multiprocessing.spawn(
  File "/usr/local/lib/python3.8/dist-packages/torch/multiprocessing/spawn.py", line 239, in spawn
    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
  File "/usr/local/lib/python3.8/dist-packages/torch/multiprocessing/spawn.py", line 197, in start_processes
    while not context.join():
  File "/usr/local/lib/python3.8/dist-packages/torch/multiprocessing/spawn.py", line 160, in join
    raise ProcessRaisedException(msg, error_index, failed_process.pid)
torch.multiprocessing.spawn.ProcessRaisedException: 

-- Process 7 terminated with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/torch/multiprocessing/spawn.py", line 69, in _wrap
    fn(i, *args)
  File "/workspace/fairseq-AT/fairseq/distributed/utils.py", line 328, in distributed_main
    main(cfg, **kwargs)
  File "/workspace/fairseq-AT/fairseq_cli/train.py", line 190, in main
    valid_losses, should_stop = train(cfg, trainer, task, epoch_itr)
  File "/usr/lib/python3.8/contextlib.py", line 75, in inner
    return func(*args, **kwds)
  File "/workspace/fairseq-AT/fairseq_cli/train.py", line 316, in train
    log_output = trainer.train_step(samples)
  File "/usr/lib/python3.8/contextlib.py", line 75, in inner
    return func(*args, **kwds)
  File "/workspace/fairseq-AT/fairseq/trainer.py", line 830, in train_step
    loss, sample_size_i, logging_output = self.task.train_step(
  File "/workspace/fairseq-AT/fairseq/tasks/joint_triple_pretraining.py", line 513, in train_step
    loss, sample_size, logging_output, norm_list = self._per_task_train_loss(
  File "/workspace/fairseq-AT/fairseq/tasks/joint_triple_pretraining.py", line 408, in _per_task_train_loss
    loss, sample_size, logging_output = criterion(
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/workspace/fairseq-AT/fairseq/criterions/label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT.py", line 364, in forward
    weight = 1.0 / ((0 if sample['st'] is None else (st_encoder_out["encoder_padding_mask"][0].shape[0] / (1 if self.at_level == "token" else at_win['stride'])))
NameError: name 'at_win' is not defined

/usr/lib/python3.8/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 30 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
2023-07-11 12:06:46 | INFO | fairseq.distributed.utils | distributed init (rank 4): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | fairseq.distributed.utils | distributed init (rank 2): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | fairseq.distributed.utils | distributed init (rank 6): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | fairseq.distributed.utils | distributed init (rank 1): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | fairseq.distributed.utils | distributed init (rank 5): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | fairseq.distributed.utils | distributed init (rank 0): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | fairseq.distributed.utils | distributed init (rank 3): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | fairseq.distributed.utils | distributed init (rank 7): tcp://localhost:18806
2023-07-11 12:06:47 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 7
2023-07-11 12:06:47 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 3
2023-07-11 12:06:47 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 4
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 2
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 6
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 0
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 1
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:1 to store for rank: 5
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 5: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 5
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 7: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 7
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 3
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 1
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 0
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 2
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 4: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | torch.distributed.distributed_c10d | Rank 6: Completed store-based barrier for key:store_based_barrier_key:1 with 8 nodes.
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 6
2023-07-11 12:06:48 | INFO | fairseq.distributed.utils | initialized host capios as rank 4
2023-07-11 12:06:50 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': True, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': True, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 8, 'distributed_num_procs': 8, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': 'tcp://localhost:18806', 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'no_c10d', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 8, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': True, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 2, 'skip_invalid_size_inputs_valid_test': True, 'max_tokens': 15000, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train_st,train_asr,train_mt', 'valid_subset': 'dev_st', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 15000, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 100, 'max_update': 60000, 'stop_time_hours': 0.0, 'clip_norm': 10.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.0002], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': './checkpoints/mustc/st/ende_shrink_AT_window_check', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 2000, 'keep_interval_updates': 5, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': 2, 'keep_best_checkpoints': 10, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'bleu', 'maximize_best_checkpoint_metric': True, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 8}, 'generation': {'_name': None, 'beam': 5, 'beam_mt': 0, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'max_len_a_mt': 0.0, 'max_len_b_mt': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'lenpen_mt': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='s2t_joint', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'task': Namespace(_name='joint_triple_pretraining', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'criterion': Namespace(_name='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', activation_dropout=0.1, activation_fn='relu', adam_betas='(0.9,0.98)', adam_eps=1e-08, adapter_dim=4096, adapter_dropout=0.0, adapter_layers=0, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, add_position_embed=True, add_position_embed_after_ctc=True, add_proj_norm=False, adversarial_training=True, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, apply_mask=True, arch='s2t_joint', at_level='window', at_nopad=True, attention_dropout=0.1, avg_shrink=False, azureml_logging=False, ban_cl_step=-1, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=10.0, cluster_embed_path='', cnn_module_kernel=31, combine_valid_subsets=None, config_yaml='config_st.yaml', continue_once=None, contrastive_alpha=1.0, contrastive_beta=1.0, contrastive_temperature=0.1, conv_channels=512, conv_kernel_sizes='5,5', cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy_with_w2v_ctc_shrink_joint_AT', ctc_weight=0.3, curriculum=0, data='data_all_ende_lcrm', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=8, decoder_embed_dim=512, decoder_embed_path='/workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline', decoder_ffn_embed_dim=2048, decoder_input_dim=512, decoder_layerdrop=0.0, decoder_layers=6, decoder_learned_pos=False, decoder_normalize_before=True, decoder_output_dim=512, decrease_step=0, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=8, distributed_port=-1, distributed_rank=0, distributed_world_size=8, dropout=0.1, dropout_input=0.0, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, embed_path='', embedding_l2norm=False, empty_cache_freq=0, encoder_attention_heads=8, encoder_embed_dim=512, encoder_ffn_embed_dim=2048, encoder_layers=6, encoder_normalize_before=True, eos=2, eval_bleu=True, eval_bleu_args='{}', eval_bleu_detok='space', eval_bleu_detok_args='{}', eval_bleu_remove_bpe='sentencepiece', eval_tokenized_bleu=True, fast_stat_sync=False, feature_grad_mult=0.0, final_dropout=0.1, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=True, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, freeze_finetune_updates=0, gen_subset='test', get_similarity=False, gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, is_shrink='uniq', keep_best_checkpoints=10, keep_interval_updates=5, keep_interval_updates_pattern=-1, keep_last_epochs=2, label_smoothing=0.2, latent_temp=(1, 0.1, 0.999995), layerdrop=0.0, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lookback=False, lr=[0.0002], lr_scheduler='inverse_sqrt', macaron_style=False, mask_channel_length=6, mask_channel_other=0, mask_channel_prob=0.25, mask_channel_selection='static', mask_length=10, mask_other=0, mask_prob=0.5, mask_selection='static', max_epoch=100, max_position_ctc=0, max_source_positions=6000, max_target_positions=1024, max_tokens=15000, max_tokens_valid=15000, max_update=60000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, mt_model_args=None, mt_model_filter_size=0, mt_model_path='/workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt', no_epoch_checkpoints=True, no_last_checkpoints=False, no_mask_channel_overlap=False, no_mask_overlap=False, no_progress_bar=True, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, normalize=False, not_fsdp_flatten_parameters=False, nprocs_per_node=8, num_shards=1, num_workers=2, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', position_unit_size=0, post_process='sentencepiece', profile=False, quant_noise_pq=0, quantization_config_path=None, rel_pos_type='legacy', relative_attn=False, report_accuracy=True, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', save_dir='./checkpoints/mustc/st/ende_shrink_AT_window_check', save_interval=1, save_interval_updates=2000, scoring='bleu', sead_layers=6, seed=1, sentence_avg=False, shard_id=0, share_ctc_embed=True, share_decoder_input_output_embed=True, share_two_encoders=True, simul_type=None, skip_invalid_size_inputs_valid_test=True, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, task='joint_triple_pretraining', tensorboard_logdir='./checkpoints/mustc/st/ende_shrink_AT_window_check', text_conv_kernel=0, threshold_loss_scale=None, tokenizer=None, tpu=False, train_config='/workspace/fairseq-AT/egs/pretrain-all/conf/train_shrink_AT.yaml', train_st_without_ctc=False, train_subset='train_st,train_asr,train_mt', transfer_proj=False, unk=3, update_epoch_batch_itr=False, update_freq=[1], update_ordered_indices_seed=False, use_bmuf=False, use_cnn_module=True, use_ctc_cluster=False, use_ctc_loss=True, use_ctc_shrink=True, use_double_ctc=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, use_token_contrastive=False, use_two_contrastive=False, use_w2v_ctc=True, user_dir=None, valid_subset='dev_st', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, w2v_args=None, w2v_path='/workspace/pretrain/hubert_base_ls960.pt', wandb_project=None, warmup_init_lr=1e-07, warmup_updates=5000, weight_decay=0.0, weight_steps=5000, word_align=False, write_checkpoints_asynchronously=False, zero_infinity=True, zero_sharding='none', zero_triu=False), 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9,0.98)', 'adam_eps': 1e-08, 'weight_decay': 0.0, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [0.0002]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 5000, 'warmup_init_lr': 1e-07, 'lr': [0.0002]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'simul_type': None}
2023-07-11 12:06:50 | INFO | fairseq.tasks.joint_triple_pretraining | dictionary size (dict.wrd.txt): 10,000
2023-07-11 12:06:50 | INFO | fairseq.tasks.joint_triple_pretraining | asr dictionary size (dict.wrd.txt): 10,000
2023-07-11 12:06:50 | INFO | fairseq.tasks.joint_triple_pretraining | cluster dictionary size (kmeans100.convert.txt): 5,224
2023-07-11 12:06:50 | INFO | fairseq.tasks.joint_triple_pretraining | Initial task weight: asr 1.0: mt 1.0
2023-07-11 12:06:50 | INFO | root | load pretrained embeddings: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 12:06:55 | INFO | fairseq.tasks.hubert_pretraining | current directory is /workspace/fairseq-AT/egs/pretrain-all
2023-07-11 12:06:55 | INFO | fairseq.tasks.hubert_pretraining | HubertPretrainingTask Config {'_name': 'hubert_pretraining', 'data': 'data_all_ende_lcrm', 'fine_tuning': False, 'labels': ['layer6.km500'], 'label_dir': None, 'label_rate': 50.0, 'sample_rate': 16000, 'normalize': False, 'enable_padding': False, 'max_keep_size': None, 'max_sample_size': 250000, 'min_sample_size': 32000, 'single_target': False, 'random_crop': True, 'pad_audio': False}
2023-07-11 12:06:55 | INFO | fairseq.models.hubert.hubert | HubertModel Config: {'_name': 'hubert', 'label_rate': 50.0, 'extractor_mode': default, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': gelu, 'layer_type': transformer, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.1, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.1, 'final_dim': 256, 'untie_final_proj': False, 'layer_norm_first': False, 'conv_feature_layers': '[(512,10,5)] + [(512,3,2)] * 4 + [(512,2,2)] * 2', 'conv_bias': False, 'logit_temp': 0.1, 'target_glu': False, 'feature_grad_mult': 0.0, 'mask_length': 10, 'mask_prob': 0.5, 'mask_selection': static, 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'mask_channel_length': 6, 'mask_channel_prob': 0.25, 'mask_channel_selection': static, 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'conv_pos': 128, 'conv_pos_groups': 16, 'latent_temp': [2.0, 0.5, 0.999995], 'skip_masked': False, 'skip_nomask': False, 'checkpoint_activations': False, 'required_seq_len_multiple': 2, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': True}
2023-07-11 12:06:56 | INFO | root | load pretrained hubert
2023-07-11 12:07:00 | INFO | root | load pretrained embedding as ctc proj: /workspace/fairseq-AT/egs/machine_translation/pretrain_embeddings_mustc_ende_baseline
2023-07-11 12:07:02 | INFO | root | load pretrained encoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 12:07:07 | INFO | root | load pretrained decoder: /workspace/fairseq-AT/egs/machine_translation/checkpoints/mustc/ende-baseline/last8.ensemble.pt
2023-07-11 12:07:07 | INFO | root | share the sematic adapter and textual encoder
2023-07-11 12:07:07 | INFO | fairseq_cli.train | S2TJoint(
  (acoustic_encoder): AcousticEncoder(
    (compress_ffn): Linear(in_features=768, out_features=512, bias=True)
    (proj): Linear(in_features=512, out_features=10000, bias=False)
    (w2v_model): HubertModel(
      (feature_extractor): ConvFeatureExtractionModel(
        (conv_layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(1, 512, kernel_size=(10,), stride=(5,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): Fp32GroupNorm(512, 512, eps=1e-05, affine=True)
            (3): GELU(approximate='none')
          )
          (1-4): 4 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(3,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
          (5-6): 2 x Sequential(
            (0): Conv1d(512, 512, kernel_size=(2,), stride=(2,), bias=False)
            (1): Dropout(p=0.0, inplace=False)
            (2): GELU(approximate='none')
          )
        )
      )
      (post_extract_proj): Linear(in_features=512, out_features=768, bias=True)
      (dropout_input): Dropout(p=0.0, inplace=False)
      (dropout_features): Dropout(p=0.1, inplace=False)
      (encoder): TransformerEncoder(
        (pos_conv): Sequential(
          (0): Conv1d(768, 768, kernel_size=(128,), stride=(1,), padding=(64,), groups=16)
          (1): SamePad()
          (2): GELU(approximate='none')
        )
        (layers): ModuleList(
          (0-11): 12 x TransformerSentenceEncoderLayer(
            (self_attn): MultiheadAttention(
              (dropout_module): FairseqDropout()
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (dropout1): Dropout(p=0.1, inplace=False)
            (dropout2): Dropout(p=0.1, inplace=False)
            (dropout3): Dropout(p=0.1, inplace=False)
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
        (layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      (final_proj): None
    )
    (noad): NormalAdapter(
      (subsample): Conv1dSubsampler(
        (conv_layers): ModuleList(
          (0): Conv1d(512, 512, kernel_size=(5,), stride=(2,), padding=(2,))
          (1): Conv1d(256, 1024, kernel_size=(5,), stride=(2,), padding=(2,))
        )
      )
      (layers): ModuleList()
    )
    (sead): SemanticAdapter(
      (embed_positions): SinusoidalPositionalEmbedding()
      (layers): ModuleList(
        (0-5): 6 x TransformerEncoderLayerBase(
          (self_attn): MultiheadAttention(
            (dropout_module): FairseqDropout()
            (k_proj): Linear(in_features=512, out_features=512, bias=True)
            (v_proj): Linear(in_features=512, out_features=512, bias=True)
            (q_proj): Linear(in_features=512, out_features=512, bias=True)
            (out_proj): Linear(in_features=512, out_features=512, bias=True)
          )
          (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (dropout_module): FairseqDropout()
          (activation_dropout_module): FairseqDropout()
          (fc1): Linear(in_features=512, out_features=1024, bias=True)
          (fc2): Linear(in_features=1024, out_features=512, bias=True)
          (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
      )
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
    (final_dropout): Dropout(p=0.1, inplace=False)
    (shrink_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (textual_encoder): MTModelEncoder(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
  )
  (decoder): TransformerDecoderScriptable(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(10000, 512, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0-5): 6 x TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=512, out_features=512, bias=True)
          (v_proj): Linear(in_features=512, out_features=512, bias=True)
          (q_proj): Linear(in_features=512, out_features=512, bias=True)
          (out_proj): Linear(in_features=512, out_features=512, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=512, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=512, bias=True)
        (final_layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (output_projection): Linear(in_features=512, out_features=10000, bias=False)
  )
  (task_net): TaskNetwork(
    (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    (down_proj): Linear(in_features=512, out_features=256, bias=True)
    (up_proj): Linear(in_features=256, out_features=512, bias=True)
    (dropout_module): FairseqDropout()
    (task_proj): Linear(in_features=512, out_features=1, bias=False)
  )
)
2023-07-11 12:07:07 | INFO | fairseq_cli.train | task: JointTriplePretrainingTask
2023-07-11 12:07:07 | INFO | fairseq_cli.train | model: S2TJoint
2023-07-11 12:07:07 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropywithW2vCtcShrinkJointAT
2023-07-11 12:07:07 | INFO | fairseq_cli.train | num. shared model params: 134,449,280 (num. trained: 134,449,280)
2023-07-11 12:07:07 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
2023-07-11 12:07:07 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 12:07:07 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:07:07 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:07:07 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="dev_st", n_samples=1418, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:07:12 | INFO | torch.distributed.distributed_c10d | Added key: store_based_barrier_key:2 to store for rank: 0
2023-07-11 12:07:12 | INFO | torch.distributed.distributed_c10d | Rank 0: Completed store-based barrier for key:store_based_barrier_key:2 with 8 nodes.
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- textual_encoder.embed_tokens.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.embed_tokens.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.weight <- decoder.output_projection.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.0.0.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.1.0.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.2.0.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.3.0.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.4.0.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.5.0.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- acoustic_encoder.w2v_model.feature_extractor.conv_layers.6.0.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- decoder.output_projection.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.proj.bias <- task_net.task_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.weight <- textual_encoder.layers.0.self_attn.k_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.k_proj.bias <- textual_encoder.layers.0.self_attn.k_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.weight <- textual_encoder.layers.0.self_attn.v_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.v_proj.bias <- textual_encoder.layers.0.self_attn.v_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.weight <- textual_encoder.layers.0.self_attn.q_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.q_proj.bias <- textual_encoder.layers.0.self_attn.q_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.weight <- textual_encoder.layers.0.self_attn.out_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn.out_proj.bias <- textual_encoder.layers.0.self_attn.out_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.weight <- textual_encoder.layers.0.self_attn_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.self_attn_layer_norm.bias <- textual_encoder.layers.0.self_attn_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.weight <- textual_encoder.layers.0.fc1.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc1.bias <- textual_encoder.layers.0.fc1.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.weight <- textual_encoder.layers.0.fc2.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.fc2.bias <- textual_encoder.layers.0.fc2.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.weight <- textual_encoder.layers.0.final_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.0.final_layer_norm.bias <- textual_encoder.layers.0.final_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.weight <- textual_encoder.layers.1.self_attn.k_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.k_proj.bias <- textual_encoder.layers.1.self_attn.k_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.weight <- textual_encoder.layers.1.self_attn.v_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.v_proj.bias <- textual_encoder.layers.1.self_attn.v_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.weight <- textual_encoder.layers.1.self_attn.q_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.q_proj.bias <- textual_encoder.layers.1.self_attn.q_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.weight <- textual_encoder.layers.1.self_attn.out_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn.out_proj.bias <- textual_encoder.layers.1.self_attn.out_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.weight <- textual_encoder.layers.1.self_attn_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.self_attn_layer_norm.bias <- textual_encoder.layers.1.self_attn_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.weight <- textual_encoder.layers.1.fc1.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc1.bias <- textual_encoder.layers.1.fc1.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.weight <- textual_encoder.layers.1.fc2.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.fc2.bias <- textual_encoder.layers.1.fc2.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.weight <- textual_encoder.layers.1.final_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.1.final_layer_norm.bias <- textual_encoder.layers.1.final_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.weight <- textual_encoder.layers.2.self_attn.k_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.k_proj.bias <- textual_encoder.layers.2.self_attn.k_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.weight <- textual_encoder.layers.2.self_attn.v_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.v_proj.bias <- textual_encoder.layers.2.self_attn.v_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.weight <- textual_encoder.layers.2.self_attn.q_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.q_proj.bias <- textual_encoder.layers.2.self_attn.q_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.weight <- textual_encoder.layers.2.self_attn.out_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn.out_proj.bias <- textual_encoder.layers.2.self_attn.out_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.weight <- textual_encoder.layers.2.self_attn_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.self_attn_layer_norm.bias <- textual_encoder.layers.2.self_attn_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.weight <- textual_encoder.layers.2.fc1.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc1.bias <- textual_encoder.layers.2.fc1.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.weight <- textual_encoder.layers.2.fc2.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.fc2.bias <- textual_encoder.layers.2.fc2.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.weight <- textual_encoder.layers.2.final_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.2.final_layer_norm.bias <- textual_encoder.layers.2.final_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.weight <- textual_encoder.layers.3.self_attn.k_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.k_proj.bias <- textual_encoder.layers.3.self_attn.k_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.weight <- textual_encoder.layers.3.self_attn.v_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.v_proj.bias <- textual_encoder.layers.3.self_attn.v_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.weight <- textual_encoder.layers.3.self_attn.q_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.q_proj.bias <- textual_encoder.layers.3.self_attn.q_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.weight <- textual_encoder.layers.3.self_attn.out_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn.out_proj.bias <- textual_encoder.layers.3.self_attn.out_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.weight <- textual_encoder.layers.3.self_attn_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.self_attn_layer_norm.bias <- textual_encoder.layers.3.self_attn_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.weight <- textual_encoder.layers.3.fc1.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc1.bias <- textual_encoder.layers.3.fc1.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.weight <- textual_encoder.layers.3.fc2.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.fc2.bias <- textual_encoder.layers.3.fc2.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.weight <- textual_encoder.layers.3.final_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.3.final_layer_norm.bias <- textual_encoder.layers.3.final_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.weight <- textual_encoder.layers.4.self_attn.k_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.k_proj.bias <- textual_encoder.layers.4.self_attn.k_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.weight <- textual_encoder.layers.4.self_attn.v_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.v_proj.bias <- textual_encoder.layers.4.self_attn.v_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.weight <- textual_encoder.layers.4.self_attn.q_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.q_proj.bias <- textual_encoder.layers.4.self_attn.q_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.weight <- textual_encoder.layers.4.self_attn.out_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn.out_proj.bias <- textual_encoder.layers.4.self_attn.out_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.weight <- textual_encoder.layers.4.self_attn_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.self_attn_layer_norm.bias <- textual_encoder.layers.4.self_attn_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.weight <- textual_encoder.layers.4.fc1.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc1.bias <- textual_encoder.layers.4.fc1.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.weight <- textual_encoder.layers.4.fc2.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.fc2.bias <- textual_encoder.layers.4.fc2.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.weight <- textual_encoder.layers.4.final_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.4.final_layer_norm.bias <- textual_encoder.layers.4.final_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.weight <- textual_encoder.layers.5.self_attn.k_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.k_proj.bias <- textual_encoder.layers.5.self_attn.k_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.weight <- textual_encoder.layers.5.self_attn.v_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.v_proj.bias <- textual_encoder.layers.5.self_attn.v_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.weight <- textual_encoder.layers.5.self_attn.q_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.q_proj.bias <- textual_encoder.layers.5.self_attn.q_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.weight <- textual_encoder.layers.5.self_attn.out_proj.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn.out_proj.bias <- textual_encoder.layers.5.self_attn.out_proj.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.weight <- textual_encoder.layers.5.self_attn_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.self_attn_layer_norm.bias <- textual_encoder.layers.5.self_attn_layer_norm.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.weight <- textual_encoder.layers.5.fc1.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc1.bias <- textual_encoder.layers.5.fc1.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.weight <- textual_encoder.layers.5.fc2.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.fc2.bias <- textual_encoder.layers.5.fc2.bias
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.weight <- textual_encoder.layers.5.final_layer_norm.weight
2023-07-11 12:07:12 | INFO | fairseq.trainer | detected shared parameter: acoustic_encoder.sead.layers.5.final_layer_norm.bias <- textual_encoder.layers.5.final_layer_norm.bias
2023-07-11 12:07:13 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   0: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   1: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   2: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   3: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   4: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   5: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   6: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | rank   7: capabilities =  8.6  ; total memory = 23.691 GB ; name = NVIDIA GeForce RTX 3090                 
2023-07-11 12:07:13 | INFO | fairseq.utils | ***********************CUDA enviroments for all 8 workers***********************
2023-07-11 12:07:13 | INFO | fairseq_cli.train | training on 8 devices (GPUs/TPUs)
2023-07-11 12:07:13 | INFO | fairseq_cli.train | max tokens per device = 15000 and max sentences per device = None
2023-07-11 12:07:13 | INFO | fairseq.trainer | Preparing to load checkpoint ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 12:07:13 | INFO | fairseq.trainer | No existing checkpoint found ./checkpoints/mustc/st/ende_shrink_AT_window_check/checkpoint_last.pt
2023-07-11 12:07:13 | INFO | fairseq.trainer | loading train data for epoch 1
2023-07-11 12:07:13 | INFO | fairseq.tasks.speech_to_text | pre-tokenizer: {'tokenizer': None}
2023-07-11 12:07:13 | INFO | fairseq.tasks.speech_to_text | tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:07:13 | INFO | fairseq.tasks.joint_triple_pretraining | src tokenizer: {'bpe': 'sentencepiece', 'sentencepiece_model': '/workspace/fairseq-AT/egs/pretrain-all/data_all_ende_lcrm/sentencepiece.bpe.model'}
2023-07-11 12:07:14 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_mt", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:07:16 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_asr", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:07:18 | INFO | fairseq.data.audio.triple_dataset | TripleDataset(split="train_st", n_samples=225277, prepend_tgt_lang_tag=False, shuffle=False, transforms=None)
2023-07-11 12:08:22 | INFO | fairseq.data.iterators | grouped total_num_itrs = 1474
2023-07-11 12:08:22 | INFO | fairseq.trainer | begin training epoch 1
2023-07-11 12:08:22 | INFO | fairseq_cli.train | Start iterating over samples
2023-07-11 12:08:32 | INFO | fairseq.trainer | NOTE: gradient overflow detected, ignoring gradient, setting loss scale to: 64.0
2023-07-11 12:08:50 | INFO | fairseq.trainer | NOTE: gradient overflow detected, ignoring gradient, setting loss scale to: 32.0
2023-07-11 12:10:06 | INFO | train_inner | epoch 001:    102 / 1474 loss=13.853, trans_loss=5.625, nll_loss=4.213, w2v_ctc_loss=14.999, task_loss=0.785, contrastive_loss=3.305, total=4208.4, n_correct=199.87, ppl=18.54, accuracy=4.749, wps=13450.8, ups=1.07, wpb=12567.1, bsz=469.7, num_updates=100, lr=4.098e-06, gnorm=1.011, clip=0, loss_scale=32, train_wall=96, gb_free=16.4, wall=173
